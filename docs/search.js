window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "terra", "modulename": "terra", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.Terra", "modulename": "terra", "qualname": "Terra", "type": "class", "doc": "<p>constructor of the Terra class</p>\n\n<p>Args:\n    api_key (<code>str</code>) : Your API Key\n    dev_id (<code>str</code>) : Your dev ID\n    secret (<code>str</code>) : Your terra secret (for web hooks)</p>\n"}, {"fullname": "terra.Terra.__init__", "modulename": "terra", "qualname": "Terra.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, api_key: str, dev_id: str, secret: str)", "funcdef": "def"}, {"fullname": "terra.Terra.from_user_id", "modulename": "terra", "qualname": "Terra.from_user_id", "type": "function", "doc": "<p>Creates a User instance out of a UUID corresponding to a registered User on the API</p>\n\n<p>Args:\n    user_id (<code>str</code>): UUID corresponding to a user currently authenticated on the API</p>\n\n<p>Returns:\n    <code>User</code>: Created User instance</p>\n", "signature": "(self, user_id: str) -> terra.models.user.User", "funcdef": "def"}, {"fullname": "terra.Terra.get_activity_for_user", "modulename": "terra", "qualname": "Terra.get_activity_for_user", "type": "function", "doc": "<p>Retrieves workouts/activity data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_body_for_user", "modulename": "terra", "qualname": "Terra.get_body_for_user", "type": "function", "doc": "<p>Retrieves body metrics data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_daily_for_user", "modulename": "terra", "qualname": "Terra.get_daily_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_sleep_for_user", "modulename": "terra", "qualname": "Terra.get_sleep_for_user", "type": "function", "doc": "<p>Retrieves sleep data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_athlete_for_user", "modulename": "terra", "qualname": "Terra.get_athlete_for_user", "type": "function", "doc": "<p>Retrieves profile info/athlete data for a given User object. By default, data will be asynchronously sent to\nregistered webhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_menstruation_for_user", "modulename": "terra", "qualname": "Terra.get_menstruation_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set,\n        will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_nutrition_for_user", "modulename": "terra", "qualname": "Terra.get_nutrition_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.generate_widget_session", "modulename": "terra", "qualname": "Terra.generate_widget_session", "type": "function", "doc": "<p>Generates a widget session used to allow an end user to authenticate through the API. Users should be\nredirected to the given URL in order to complete authentication</p>\n\n<p>Args:\n    providers (List[<code>str</code>]): Providers to display on widget wearable selection screen, by leaving it empty it will use all default providers\n    auth_success_redirect_url (Optional[<code>str</code>]): URL to redirect to upon successful authentication\n    auth_failure_redirect_url (Optional[<code>str</code>]): URL to redirect to upon unsuccessful authentication\n    language (Optional[<code>str</code>]): Language to display widget in\n    reference_id (Optional[<code>str</code>]): ID of a user in your app, which will be returned at the end of a successful auth\n    **kwargs: Optional additional arguments to be passed in to the body of the request</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing WidgetSession parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    providers: List[str],\n    auth_success_redirect_url: Optional[str] = None,\n    auth_failure_redirect_url: Optional[str] = None,\n    language: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    **kwargs: Any\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.generate_authentication_url", "modulename": "terra", "qualname": "Terra.generate_authentication_url", "type": "function", "doc": "<p>Generates an authentication URL to allow an end user to authenticate through the API. Users should be\nredirected to the given URL in order to complete authentication. User ID will be provided in the response\nfor convenience (note that at this stage, said user will have yet to complete the auth flow)</p>\n\n<p>Args:\n    resource (<code>str</code>): Provider to authenticate user with\n    auth_success_redirect_url (Optional[<code>str</code>]): URL to redirect to upon successful authentication\n    auth_failure_redirect_url (Optional[<code>str</code>]): URL to redirect to upon unsuccessful authentication\n    reference_id (Optional[<code>str</code>]): ID of a user in your app, which will be returned at the\n        end of a successful auth\n    **kwargs: Optional additional arguments to be passed in to the body of the request</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserAuthUrl parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    resource: str,\n    auth_success_redirect_url: Optional[str] = None,\n    auth_failure_redirect_url: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    **kwargs: Any\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.get_user_info", "modulename": "terra", "qualname": "Terra.get_user_info", "type": "function", "doc": "<p>Retrieve information on a given User, including is_authenticated status, indicating if the user has\nsuccessfully completed auth flow, or has yet to do so\nNote: Also updates information on user object passed as an argument</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User to retrieve information for</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserInfo parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.deauthenticate_user", "modulename": "terra", "qualname": "Terra.deauthenticate_user", "type": "function", "doc": "<p>Deauthenticates the given User from the Api. If successful, this will trigger a <code>deauth</code>\nwebhook event.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User to Deauthenticate from the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserDeauthResp parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.list_users", "modulename": "terra", "qualname": "Terra.list_users", "type": "function", "doc": "<p>Lists all users registered under Client's credentials on the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing SubscribedUsers parsed response object if no error has occured</p>\n", "signature": "(self) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.list_providers", "modulename": "terra", "qualname": "Terra.list_providers", "type": "function", "doc": "<p>Lists all providers on the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed response object if no error has occured</p>\n", "signature": "(self) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.Terra.check_terra_signature", "modulename": "terra", "qualname": "Terra.check_terra_signature", "type": "function", "doc": "<p>Function to test if the body of an API response comes from terra using SHA256</p>\n\n<p>Args:\n    body (<code>str</code>): The body from API response as a string\n    header (<code>str</code>): The header from API response as a string</p>\n\n<p>Returns:\n    <code>bool</code>: True if the API response comes from Terra</p>\n", "signature": "(self, body: str, header: str) -> bool", "funcdef": "def"}, {"fullname": "terra.Terra.handle_flask_webhook", "modulename": "terra", "qualname": "Terra.handle_flask_webhook", "type": "function", "doc": "<p>Parses Terra webhooks from a flask request</p>\n\n<p>Args:\n    request (<code>flask.request</code>): the flask request object</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed\n        response object if no error has occurred</p>\n", "signature": "(\n    self,\n    request: flask.wrappers.Request\n) -> Optional[terra.api.api_responses.TerraWebhookResponse]", "funcdef": "def"}, {"fullname": "terra.Terra.handle_webhook", "modulename": "terra", "qualname": "Terra.handle_webhook", "type": "function", "doc": "<p>Function to Parse web hooks from Terra</p>\n\n<p>Args:\n    payload (<code>str</code>): The body from API response as a string\n    terra_signature_header (<code>str</code>): The terra_signature header from API response as a string</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed\n        response object if no error has occurred</p>\n", "signature": "(\n    self,\n    payload: str,\n    terra_signature_header: str\n) -> Optional[terra.api.api_responses.TerraWebhookResponse]", "funcdef": "def"}, {"fullname": "terra.TerraException", "modulename": "terra", "qualname": "TerraException", "type": "class", "doc": "<p>Base class for all exceptions raised by this library</p>\n", "bases": "builtins.Exception"}, {"fullname": "terra.NoBodyException", "modulename": "terra", "qualname": "NoBodyException", "type": "class", "doc": "<p>Exception raised when a TerraApi object has no body</p>\n", "bases": "terra.exceptions.TerraException"}, {"fullname": "terra.NoClientAvailable", "modulename": "terra", "qualname": "NoClientAvailable", "type": "class", "doc": "<p>Exception raised when a TerraUser object has no Terra client set,\nbut a method requiring it is called.</p>\n", "bases": "terra.exceptions.TerraException"}, {"fullname": "terra.NoDtypeException", "modulename": "terra", "qualname": "NoDtypeException", "type": "class", "doc": "<p>Exception raised when a TerraPi object has no dtype</p>\n", "bases": "terra.exceptions.TerraException"}, {"fullname": "terra.NoUserInfoException", "modulename": "terra", "qualname": "NoUserInfoException", "type": "class", "doc": "<p>Exception raised when a UserInfoDict is None</p>\n", "bases": "terra.exceptions.TerraException"}, {"fullname": "terra.api", "modulename": "terra.api", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.api.api_responses", "modulename": "terra.api.api_responses", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.api.api_responses.NoDataReturned", "modulename": "terra.api.api_responses", "qualname": "NoDataReturned", "type": "class", "doc": "<p>NoDataReturned(user: 'typing.Optional[models.user.User]' = None, status: 'typing.Optional[str]' = 'not_available', message: 'typing.Optional[str]' = 'Data type requested not available from provider')</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.NoDataReturned.__init__", "modulename": "terra.api.api_responses", "qualname": "NoDataReturned.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    user: Optional[terra.models.user.User] = None,\n    status: Optional[str] = 'not_available',\n    message: Optional[str] = 'Data type requested not available from provider'\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.NoDataReturned.user", "modulename": "terra.api.api_responses", "qualname": "NoDataReturned.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.NoDataReturned.status", "modulename": "terra.api.api_responses", "qualname": "NoDataReturned.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'not_available'"}, {"fullname": "terra.api.api_responses.NoDataReturned.message", "modulename": "terra.api.api_responses", "qualname": "NoDataReturned.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'Data type requested not available from provider'"}, {"fullname": "terra.api.api_responses.DataReturned", "modulename": "terra.api.api_responses", "qualname": "DataReturned", "type": "class", "doc": "<p>DataReturned(user: 'typing.Optional[models.user.User]' = None, type: 'typing.Optional[str]' = None, data: 'typing.List[TerraParsedApiResponse]' = <factory>)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.DataReturned.__init__", "modulename": "terra.api.api_responses", "qualname": "DataReturned.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    user: Optional[terra.models.user.User] = None,\n    type: Optional[str] = None,\n    data: List[terra.api.api_responses.TerraParsedApiResponse] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.DataReturned.user", "modulename": "terra.api.api_responses", "qualname": "DataReturned.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.DataReturned.type", "modulename": "terra.api.api_responses", "qualname": "DataReturned.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AuthenticationFailed", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed", "type": "class", "doc": "<p>AuthenticationFailed(status: 'str' = 'error', widget_session_id: 'typing.Optional[str]' = None, reference_id: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = 'User failed to authenticate and has been deleted', type: 'str' = 'auth', reason: 'str' = 'auth_cancelled')</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.__init__", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: str = 'error',\n    widget_session_id: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    message: Optional[str] = 'User failed to authenticate and has been deleted',\n    type: str = 'auth',\n    reason: str = 'auth_cancelled'\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.status", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": " = 'error'"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.widget_session_id", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.widget_session_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.reference_id", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.reference_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.message", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'User failed to authenticate and has been deleted'"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.type", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": " = 'auth'"}, {"fullname": "terra.api.api_responses.AuthenticationFailed.reason", "modulename": "terra.api.api_responses", "qualname": "AuthenticationFailed.reason", "type": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": " = 'auth_cancelled'"}, {"fullname": "terra.api.api_responses.TerraParsedApiResponse", "modulename": "terra.api.api_responses", "qualname": "TerraParsedApiResponse", "type": "class", "doc": "<p>Base class for all data models that terra returns.</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.api.api_responses.TerraParsedApiResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "TerraParsedApiResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraWebhookResponse", "modulename": "terra.api.api_responses", "qualname": "TerraWebhookResponse", "type": "class", "doc": "<p>Base class for all data models that terra returns.</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.TerraWebhookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "TerraWebhookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    resp: Union[Dict[str, Any], requests.models.Response],\n    user: Optional[terra.models.user.User] = None,\n    dtype: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraWebhookResponse.get_parsed_response", "modulename": "terra.api.api_responses", "qualname": "TerraWebhookResponse.get_parsed_response", "type": "function", "doc": "<p>Get the parsed representation of the api response.</p>\n\n<p>Returns:\n    <code>TerraParsedApiResponse</code>: Parsed representation of the data model.</p>\n", "signature": "(self) -> terra.api.api_responses.TerraParsedApiResponse", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraWebhookResponse.get_json", "modulename": "terra.api.api_responses", "qualname": "TerraWebhookResponse.get_json", "type": "function", "doc": "<p>Get the dictionary (json) representation of the api response.</p>\n\n<p>Returns:\n    <code>dict</code>: Dictionary representation of the api response.</p>\n", "signature": "(self) -> Dict[str, Any]", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraApiResponse", "modulename": "terra.api.api_responses", "qualname": "TerraApiResponse", "type": "class", "doc": "<p>Base class for all data models that terra returns.</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.TerraApiResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "TerraApiResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    resp: requests.models.Response,\n    dtype: str,\n    user: Optional[terra.models.user.User] = None,\n    client: Optional[terra.base_client.Terra] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraApiResponse.get_parsed_response", "modulename": "terra.api.api_responses", "qualname": "TerraApiResponse.get_parsed_response", "type": "function", "doc": "<p>Get the parsed representation of the api response.</p>\n\n<p>Returns:\n    <code>TerraParsedApiResponse</code>: Parsed representation of the data model.</p>\n", "signature": "(self) -> terra.api.api_responses.TerraParsedApiResponse", "funcdef": "def"}, {"fullname": "terra.api.api_responses.TerraApiResponse.get_json", "modulename": "terra.api.api_responses", "qualname": "TerraApiResponse.get_json", "type": "function", "doc": "<p>Get the dictionary (json) representation of the api response.</p>\n\n<p>Returns:\n    <code>dict</code>: Dictionary representation of the api response.</p>\n", "signature": "(self) -> Optional[Dict[str, Any]]", "funcdef": "def"}, {"fullname": "terra.api.api_responses.GenericMessage", "modulename": "terra.api.api_responses", "qualname": "GenericMessage", "type": "class", "doc": "<p>GenericMessage(message: 'typing.Optional[str]' = None, status: 'typing.Optional[str]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.GenericMessage.__init__", "modulename": "terra.api.api_responses", "qualname": "GenericMessage.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, message: Optional[str] = None, status: Optional[str] = None)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.GenericMessage.message", "modulename": "terra.api.api_responses", "qualname": "GenericMessage.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.GenericMessage.status", "modulename": "terra.api.api_responses", "qualname": "GenericMessage.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.GoogleNoDataSourceHookResponse", "modulename": "terra.api.api_responses", "qualname": "GoogleNoDataSourceHookResponse", "type": "class", "doc": "<p>GoogleNoDataSourceHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.GoogleNoDataSourceHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "GoogleNoDataSourceHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.GoogleNoDataSourceHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "GoogleNoDataSourceHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.GoogleNoDataSourceHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "GoogleNoDataSourceHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.WidgetSession", "modulename": "terra.api.api_responses", "qualname": "WidgetSession", "type": "class", "doc": "<p>WidgetSession(expires_in: 'int' = 900, status: 'typing.Optional[str]' = None, session_id: 'typing.Optional[str]' = None, url: 'typing.Optional[str]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.WidgetSession.__init__", "modulename": "terra.api.api_responses", "qualname": "WidgetSession.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    expires_in: int = 900,\n    status: Optional[str] = None,\n    session_id: Optional[str] = None,\n    url: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.WidgetSession.expires_in", "modulename": "terra.api.api_responses", "qualname": "WidgetSession.expires_in", "type": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": " = 900"}, {"fullname": "terra.api.api_responses.WidgetSession.status", "modulename": "terra.api.api_responses", "qualname": "WidgetSession.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.WidgetSession.session_id", "modulename": "terra.api.api_responses", "qualname": "WidgetSession.session_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.WidgetSession.url", "modulename": "terra.api.api_responses", "qualname": "WidgetSession.url", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.SentToWebhook", "modulename": "terra.api.api_responses", "qualname": "SentToWebhook", "type": "class", "doc": "<p>SentToWebhook(status: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.SentToWebhook.__init__", "modulename": "terra.api.api_responses", "qualname": "SentToWebhook.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, status: Optional[str] = None, message: Optional[str] = None)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.SentToWebhook.status", "modulename": "terra.api.api_responses", "qualname": "SentToWebhook.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.SentToWebhook.message", "modulename": "terra.api.api_responses", "qualname": "SentToWebhook.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.SubscribedUsers", "modulename": "terra.api.api_responses", "qualname": "SubscribedUsers", "type": "class", "doc": "<p>SubscribedUsers(users: 'typing.List[models.user.User]' = <factory>)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.SubscribedUsers.__init__", "modulename": "terra.api.api_responses", "qualname": "SubscribedUsers.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, users: List[terra.models.user.User] = <factory>)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserDeauthResp", "modulename": "terra.api.api_responses", "qualname": "UserDeauthResp", "type": "class", "doc": "<p>UserDeauthResp(status: 'typing.Optional[str]' = 'success')</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.UserDeauthResp.__init__", "modulename": "terra.api.api_responses", "qualname": "UserDeauthResp.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, status: Optional[str] = 'success')", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserDeauthResp.status", "modulename": "terra.api.api_responses", "qualname": "UserDeauthResp.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'success'"}, {"fullname": "terra.api.api_responses.AuthHookResponse", "modulename": "terra.api.api_responses", "qualname": "AuthHookResponse", "type": "class", "doc": "<p>AuthHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, reference_id: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None, widget_session_id: 'typing.Optional[str]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.AuthHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "AuthHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None,\n    widget_session_id: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.AuthHookResponse.reference_id", "modulename": "terra.api.api_responses", "qualname": "AuthHookResponse.reference_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AuthHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "AuthHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AuthHookResponse.widget_session_id", "modulename": "terra.api.api_responses", "qualname": "AuthHookResponse.widget_session_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AccessRevokedHookResponse", "modulename": "terra.api.api_responses", "qualname": "AccessRevokedHookResponse", "type": "class", "doc": "<p>AccessRevokedHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.AccessRevokedHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "AccessRevokedHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.AccessRevokedHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "AccessRevokedHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.AccessRevokedHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "AccessRevokedHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserAuthUrl", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl", "type": "class", "doc": "<p>UserAuthUrl(status: 'typing.Optional[str]' = None, expires_in: 'int' = 900, auth_url: 'typing.Optional[str]' = None, user_id: 'typing.Optional[str]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.UserAuthUrl.__init__", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = None,\n    expires_in: int = 900,\n    auth_url: Optional[str] = None,\n    user_id: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserAuthUrl.status", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserAuthUrl.expires_in", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl.expires_in", "type": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": " = 900"}, {"fullname": "terra.api.api_responses.UserAuthUrl.auth_url", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl.auth_url", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserAuthUrl.user_id", "modulename": "terra.api.api_responses", "qualname": "UserAuthUrl.user_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserDeauthHookResponse", "modulename": "terra.api.api_responses", "qualname": "UserDeauthHookResponse", "type": "class", "doc": "<p>UserDeauthHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.UserDeauthHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "UserDeauthHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserDeauthHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "UserDeauthHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserDeauthHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "UserDeauthHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserReauthHookResponse", "modulename": "terra.api.api_responses", "qualname": "UserReauthHookResponse", "type": "class", "doc": "<p>UserReauthHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, old_user: 'typing.Optional[models.user.User]' = None, new_user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.UserReauthHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "UserReauthHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    old_user: Optional[terra.models.user.User] = None,\n    new_user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserReauthHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "UserReauthHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserReauthHookResponse.old_user", "modulename": "terra.api.api_responses", "qualname": "UserReauthHookResponse.old_user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserReauthHookResponse.new_user", "modulename": "terra.api.api_responses", "qualname": "UserReauthHookResponse.new_user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.ConnectionDegraded", "modulename": "terra.api.api_responses", "qualname": "ConnectionDegraded", "type": "class", "doc": "<p>ConnectionDegraded(status: 'typing.Optional[str]' = 'warning', message: 'typing.Optional[str]' = 'User connection degraded', type: 'typing.Optional[str]' = 'connection_error')</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.ConnectionDegraded.__init__", "modulename": "terra.api.api_responses", "qualname": "ConnectionDegraded.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'warning',\n    message: Optional[str] = 'User connection degraded',\n    type: Optional[str] = 'connection_error'\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.ConnectionDegraded.status", "modulename": "terra.api.api_responses", "qualname": "ConnectionDegraded.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'warning'"}, {"fullname": "terra.api.api_responses.ConnectionDegraded.message", "modulename": "terra.api.api_responses", "qualname": "ConnectionDegraded.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'User connection degraded'"}, {"fullname": "terra.api.api_responses.ConnectionDegraded.type", "modulename": "terra.api.api_responses", "qualname": "ConnectionDegraded.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'connection_error'"}, {"fullname": "terra.api.api_responses.ProvidersResponse", "modulename": "terra.api.api_responses", "qualname": "ProvidersResponse", "type": "class", "doc": "<p>ProvidersResponse(status: 'typing.Optional[str]' = 'warning', providers: 'typing.Optional[typing.List[str]]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.ProvidersResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "ProvidersResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'warning',\n    providers: Optional[List[str]] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.ProvidersResponse.status", "modulename": "terra.api.api_responses", "qualname": "ProvidersResponse.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'warning'"}, {"fullname": "terra.api.api_responses.ProvidersResponse.providers", "modulename": "terra.api.api_responses", "qualname": "ProvidersResponse.providers", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.RequestProcessingHookResponse", "modulename": "terra.api.api_responses", "qualname": "RequestProcessingHookResponse", "type": "class", "doc": "<p>RequestProcessingHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.RequestProcessingHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "RequestProcessingHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.RequestProcessingHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "RequestProcessingHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.RequestProcessingHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "RequestProcessingHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.ConnectionErrorHookResponse", "modulename": "terra.api.api_responses", "qualname": "ConnectionErrorHookResponse", "type": "class", "doc": "<p>ConnectionErrorHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.ConnectionErrorHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "ConnectionErrorHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.ConnectionErrorHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "ConnectionErrorHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.ConnectionErrorHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "ConnectionErrorHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.HookResponse", "modulename": "terra.api.api_responses", "qualname": "HookResponse", "type": "class", "doc": "<p>HookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.HookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "HookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, status: Optional[str] = 'success', type: Optional[str] = None)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.HookResponse.status", "modulename": "terra.api.api_responses", "qualname": "HookResponse.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = 'success'"}, {"fullname": "terra.api.api_responses.HookResponse.type", "modulename": "terra.api.api_responses", "qualname": "HookResponse.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.RequestCompletedHookResponse", "modulename": "terra.api.api_responses", "qualname": "RequestCompletedHookResponse", "type": "class", "doc": "<p>RequestCompletedHookResponse(status: 'typing.Optional[str]' = 'success', type: 'typing.Optional[str]' = None, message: 'typing.Optional[str]' = None, reference: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None)</p>\n", "bases": "HookResponse"}, {"fullname": "terra.api.api_responses.RequestCompletedHookResponse.__init__", "modulename": "terra.api.api_responses", "qualname": "RequestCompletedHookResponse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = 'success',\n    type: Optional[str] = None,\n    message: Optional[str] = None,\n    reference: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.RequestCompletedHookResponse.message", "modulename": "terra.api.api_responses", "qualname": "RequestCompletedHookResponse.message", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.RequestCompletedHookResponse.reference", "modulename": "terra.api.api_responses", "qualname": "RequestCompletedHookResponse.reference", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.RequestCompletedHookResponse.user", "modulename": "terra.api.api_responses", "qualname": "RequestCompletedHookResponse.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserInfo", "modulename": "terra.api.api_responses", "qualname": "UserInfo", "type": "class", "doc": "<p>UserInfo(status: 'typing.Optional[str]' = None, user: 'typing.Optional[models.user.User]' = None, is_authenticated: 'bool' = True)</p>\n", "bases": "TerraParsedApiResponse"}, {"fullname": "terra.api.api_responses.UserInfo.__init__", "modulename": "terra.api.api_responses", "qualname": "UserInfo.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    status: Optional[str] = None,\n    user: Optional[terra.models.user.User] = None,\n    is_authenticated: bool = True\n)", "funcdef": "def"}, {"fullname": "terra.api.api_responses.UserInfo.status", "modulename": "terra.api.api_responses", "qualname": "UserInfo.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserInfo.user", "modulename": "terra.api.api_responses", "qualname": "UserInfo.user", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[terra.models.user.User]", "default_value": " = None"}, {"fullname": "terra.api.api_responses.UserInfo.is_authenticated", "modulename": "terra.api.api_responses", "qualname": "UserInfo.is_authenticated", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": " = True"}, {"fullname": "terra.base_client", "modulename": "terra.base_client", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.base_client.Terra", "modulename": "terra.base_client", "qualname": "Terra", "type": "class", "doc": "<p>constructor of the Terra class</p>\n\n<p>Args:\n    api_key (<code>str</code>) : Your API Key\n    dev_id (<code>str</code>) : Your dev ID\n    secret (<code>str</code>) : Your terra secret (for web hooks)</p>\n"}, {"fullname": "terra.base_client.Terra.__init__", "modulename": "terra.base_client", "qualname": "Terra.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, api_key: str, dev_id: str, secret: str)", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.from_user_id", "modulename": "terra.base_client", "qualname": "Terra.from_user_id", "type": "function", "doc": "<p>Creates a User instance out of a UUID corresponding to a registered User on the API</p>\n\n<p>Args:\n    user_id (<code>str</code>): UUID corresponding to a user currently authenticated on the API</p>\n\n<p>Returns:\n    <code>User</code>: Created User instance</p>\n", "signature": "(self, user_id: str) -> terra.models.user.User", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_activity_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_activity_for_user", "type": "function", "doc": "<p>Retrieves workouts/activity data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_body_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_body_for_user", "type": "function", "doc": "<p>Retrieves body metrics data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_daily_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_daily_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_sleep_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_sleep_for_user", "type": "function", "doc": "<p>Retrieves sleep data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_athlete_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_athlete_for_user", "type": "function", "doc": "<p>Retrieves profile info/athlete data for a given User object. By default, data will be asynchronously sent to\nregistered webhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_menstruation_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_menstruation_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set,\n        will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_nutrition_for_user", "modulename": "terra.base_client", "qualname": "Terra.get_nutrition_for_user", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User for whom to fetch data\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will\n        default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.generate_widget_session", "modulename": "terra.base_client", "qualname": "Terra.generate_widget_session", "type": "function", "doc": "<p>Generates a widget session used to allow an end user to authenticate through the API. Users should be\nredirected to the given URL in order to complete authentication</p>\n\n<p>Args:\n    providers (List[<code>str</code>]): Providers to display on widget wearable selection screen, by leaving it empty it will use all default providers\n    auth_success_redirect_url (Optional[<code>str</code>]): URL to redirect to upon successful authentication\n    auth_failure_redirect_url (Optional[<code>str</code>]): URL to redirect to upon unsuccessful authentication\n    language (Optional[<code>str</code>]): Language to display widget in\n    reference_id (Optional[<code>str</code>]): ID of a user in your app, which will be returned at the end of a successful auth\n    **kwargs: Optional additional arguments to be passed in to the body of the request</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing WidgetSession parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    providers: List[str],\n    auth_success_redirect_url: Optional[str] = None,\n    auth_failure_redirect_url: Optional[str] = None,\n    language: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    **kwargs: Any\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.generate_authentication_url", "modulename": "terra.base_client", "qualname": "Terra.generate_authentication_url", "type": "function", "doc": "<p>Generates an authentication URL to allow an end user to authenticate through the API. Users should be\nredirected to the given URL in order to complete authentication. User ID will be provided in the response\nfor convenience (note that at this stage, said user will have yet to complete the auth flow)</p>\n\n<p>Args:\n    resource (<code>str</code>): Provider to authenticate user with\n    auth_success_redirect_url (Optional[<code>str</code>]): URL to redirect to upon successful authentication\n    auth_failure_redirect_url (Optional[<code>str</code>]): URL to redirect to upon unsuccessful authentication\n    reference_id (Optional[<code>str</code>]): ID of a user in your app, which will be returned at the\n        end of a successful auth\n    **kwargs: Optional additional arguments to be passed in to the body of the request</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserAuthUrl parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    resource: str,\n    auth_success_redirect_url: Optional[str] = None,\n    auth_failure_redirect_url: Optional[str] = None,\n    reference_id: Optional[str] = None,\n    **kwargs: Any\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.get_user_info", "modulename": "terra.base_client", "qualname": "Terra.get_user_info", "type": "function", "doc": "<p>Retrieve information on a given User, including is_authenticated status, indicating if the user has\nsuccessfully completed auth flow, or has yet to do so\nNote: Also updates information on user object passed as an argument</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User to retrieve information for</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserInfo parsed\n        response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.deauthenticate_user", "modulename": "terra.base_client", "qualname": "Terra.deauthenticate_user", "type": "function", "doc": "<p>Deauthenticates the given User from the Api. If successful, this will trigger a <code>deauth</code>\nwebhook event.</p>\n\n<p>Args:\n    user (<code>models.user.User</code>): User to Deauthenticate from the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing UserDeauthResp parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    user: terra.models.user.User\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.list_users", "modulename": "terra.base_client", "qualname": "Terra.list_users", "type": "function", "doc": "<p>Lists all users registered under Client's credentials on the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing SubscribedUsers parsed response object if no error has occured</p>\n", "signature": "(self) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.list_providers", "modulename": "terra.base_client", "qualname": "Terra.list_providers", "type": "function", "doc": "<p>Lists all providers on the API</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed response object if no error has occured</p>\n", "signature": "(self) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.check_terra_signature", "modulename": "terra.base_client", "qualname": "Terra.check_terra_signature", "type": "function", "doc": "<p>Function to test if the body of an API response comes from terra using SHA256</p>\n\n<p>Args:\n    body (<code>str</code>): The body from API response as a string\n    header (<code>str</code>): The header from API response as a string</p>\n\n<p>Returns:\n    <code>bool</code>: True if the API response comes from Terra</p>\n", "signature": "(self, body: str, header: str) -> bool", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.handle_flask_webhook", "modulename": "terra.base_client", "qualname": "Terra.handle_flask_webhook", "type": "function", "doc": "<p>Parses Terra webhooks from a flask request</p>\n\n<p>Args:\n    request (<code>flask.request</code>): the flask request object</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed\n        response object if no error has occurred</p>\n", "signature": "(\n    self,\n    request: flask.wrappers.Request\n) -> Optional[terra.api.api_responses.TerraWebhookResponse]", "funcdef": "def"}, {"fullname": "terra.base_client.Terra.handle_webhook", "modulename": "terra.base_client", "qualname": "Terra.handle_webhook", "type": "function", "doc": "<p>Function to Parse web hooks from Terra</p>\n\n<p>Args:\n    payload (<code>str</code>): The body from API response as a string\n    terra_signature_header (<code>str</code>): The terra_signature header from API response as a string</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing ProvidersResponse parsed\n        response object if no error has occurred</p>\n", "signature": "(\n    self,\n    payload: str,\n    terra_signature_header: str\n) -> Optional[terra.api.api_responses.TerraWebhookResponse]", "funcdef": "def"}, {"fullname": "terra.constants", "modulename": "terra.constants", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.constants.BASE_URL", "modulename": "terra.constants", "qualname": "BASE_URL", "type": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": " = 'https://api.tryterra.co/v2'"}, {"fullname": "terra.exceptions", "modulename": "terra.exceptions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.exceptions.TerraException", "modulename": "terra.exceptions", "qualname": "TerraException", "type": "class", "doc": "<p>Base class for all exceptions raised by this library</p>\n", "bases": "builtins.Exception"}, {"fullname": "terra.exceptions.NoDtypeException", "modulename": "terra.exceptions", "qualname": "NoDtypeException", "type": "class", "doc": "<p>Exception raised when a TerraPi object has no dtype</p>\n", "bases": "TerraException"}, {"fullname": "terra.exceptions.NoBodyException", "modulename": "terra.exceptions", "qualname": "NoBodyException", "type": "class", "doc": "<p>Exception raised when a TerraApi object has no body</p>\n", "bases": "TerraException"}, {"fullname": "terra.exceptions.NoUserInfoException", "modulename": "terra.exceptions", "qualname": "NoUserInfoException", "type": "class", "doc": "<p>Exception raised when a UserInfoDict is None</p>\n", "bases": "TerraException"}, {"fullname": "terra.exceptions.NoClientAvailable", "modulename": "terra.exceptions", "qualname": "NoClientAvailable", "type": "class", "doc": "<p>Exception raised when a TerraUser object has no Terra client set,\nbut a method requiring it is called.</p>\n", "bases": "TerraException"}, {"fullname": "terra.models", "modulename": "terra.models", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.base_model", "modulename": "terra.models.base_model", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.base_model.TerraDataModel", "modulename": "terra.models.base_model", "qualname": "TerraDataModel", "type": "class", "doc": "<p>Base class for all data models that terra returns.</p>\n"}, {"fullname": "terra.models.base_model.TerraDataModel.__init__", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.keys", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.keys", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> Generator[str, NoneType, NoneType]", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.values", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.values", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> Generator[Any, NoneType, NoneType]", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.items", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.items", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> Generator[Tuple[str, Any], NoneType, NoneType]", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.to_dict", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.to_dict", "type": "function", "doc": "<p>Get the dictionary (json) representation of the data model.</p>\n\n<p>This method inspects the attributes of the instance that it is being called on\nto determine how to build the correct payload from the data stored.</p>\n\n<p>Returns:\n    <code>dict</code>: Dictionary representation of the data model.</p>\n", "signature": "(self) -> Dict[str, Any]", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.filter_data", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.filter_data", "type": "function", "doc": "<p>Returns a generator of all the data models that match the filter</p>\n\n<p>Args:\n    term<code>str</code>: the word to filter with</p>\n\n<p>Returns:\n    <code>typing.Generator[datamodelT]</code></p>\n", "signature": "(\n    self: terra.models.base_model.TerraDataModel,\n    term: str\n) -> Generator[~datamodelT, NoneType, NoneType]", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.from_dict", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.from_dict", "type": "function", "doc": "<p>Return the Class data model representation of the dictionary (json).</p>\n\n<p>This method inspects the attributes of the class that it is being called on\nto determine how to build the correct payload from the data stored.</p>\n\n<p>Args:\n    model_dict<code>dict</code>:\n    safe<code>bool</code>:</p>\n\n<p>Returns:\n    <code>terrpython.models.base_model.TerraDataModel</code></p>\n", "signature": "(\n    cls: Type[~datamodelT],\n    model_dict: Dict[str, Any],\n    safe: bool = False\n) -> ~datamodelT", "funcdef": "def"}, {"fullname": "terra.models.base_model.TerraDataModel.populate_from_dict", "modulename": "terra.models.base_model", "qualname": "TerraDataModel.populate_from_dict", "type": "function", "doc": "<p>Populates missing data fields in the class given a dictionary (json).</p>\n\n<p>This method inspects the attributes of the instance that it is being called on\nto determine how to build the correct payload from the data stored.</p>\n\n<p>Args:\n    model_dict<code>dict</code>:\n    safe<code>bool</code>:</p>\n\n<p>Returns:\n    <code>terrpython.models.base_model.TerraDataModel</code></p>\n", "signature": "(\n    self: ~datamodelT,\n    model_dict: Dict[str, Any],\n    safe: bool = False\n) -> ~datamodelT", "funcdef": "def"}, {"fullname": "terra.models.user", "modulename": "terra.models.user", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.user.User", "modulename": "terra.models.user", "qualname": "User", "type": "class", "doc": "<p>User(client: 't.Optional[base_client.Terra]' = None, user_id: 't.Optional[str]' = None, provider: 't.Optional[str]' = None, last_webhook_update: 't.Optional[str]' = None) -> 'None'</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.user.User.__init__", "modulename": "terra.models.user", "qualname": "User.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    client: Optional[terra.base_client.Terra] = None,\n    user_id: Optional[str] = None,\n    provider: Optional[str] = None,\n    last_webhook_update: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.user.User.fill_in_user_info", "modulename": "terra.models.user", "qualname": "User.fill_in_user_info", "type": "function", "doc": "<p>Internal method used to retrieve data for User</p>\n\n<p>Args:\n    dtype (<code>str</code>): datatype to be fetched</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_activity", "modulename": "terra.models.user", "qualname": "User.get_activity", "type": "function", "doc": "<p>Retrieves workouts/activity data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:</p>\n\n<pre><code>start_date (`datetime.datetime`): Datetime object for which to fetch data\nend_date:obj (:`datetime.datetime`): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\nto_webhook (`bool`): Whether to send data to registered webhook URL or return as a response body\n</code></pre>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_body", "modulename": "terra.models.user", "qualname": "User.get_body", "type": "function", "doc": "<p>Retrieves body metrics data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_nutrition", "modulename": "terra.models.user", "qualname": "User.get_nutrition", "type": "function", "doc": "<p>Retrieves nutrition data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_daily", "modulename": "terra.models.user", "qualname": "User.get_daily", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_sleep", "modulename": "terra.models.user", "qualname": "User.get_sleep", "type": "function", "doc": "<p>Retrieves sleep data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:</p>\n\n<pre><code>start_date (`datetime.datetime`): Datetime object for which to fetch data\nend_date:obj (:`datetime.datetime`): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\nto_webhook (`bool`): Whether to send data to registered webhook URL or return as a response body\n</code></pre>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_athlete", "modulename": "terra.models.user", "qualname": "User.get_athlete", "type": "function", "doc": "<p>Retrieves profile info/athlete data for a given User object. By default, data will be asynchronously sent to\nregistered webhook URL.</p>\n\n<p>Args:\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body\nReturns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.user.User.get_menstruation", "modulename": "terra.models.user", "qualname": "User.get_menstruation", "type": "function", "doc": "<p>Retrieves daily summary data for a given User object. By default, data will be asynchronously sent to registered\nwebhook URL.</p>\n\n<p>Args:\n    start_date (<code>datetime.datetime</code>): Datetime object for which to fetch data\n    end_date:obj (:<code>datetime.datetime</code>): Optional end_date for which to fetch data - if not set, will default to start_date + 24h according to current API specifications\n    to_webhook (<code>bool</code>): Whether to send data to registered webhook URL or return as a response body</p>\n\n<p>Returns:\n    <code>models.api_responses.TerraApiResponse</code>: API response object containing DataReturned parsed response object if no error has occured</p>\n", "signature": "(\n    self,\n    start_date: datetime.datetime,\n    end_date: Optional[datetime.datetime] = None,\n    to_webhook: bool = True\n) -> terra.api.api_responses.TerraApiResponse", "funcdef": "def"}, {"fullname": "terra.models.v2", "modulename": "terra.models.v2", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.activity", "modulename": "terra.models.v2.activity", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.activity.Activity", "modulename": "terra.models.v2.activity", "qualname": "Activity", "type": "class", "doc": "<p>Activity(metadata: terra.models.v2.activity.Metadata = <factory>, lap_data: terra.models.v2.activity.LapData = <factory>, distance_data: terra.models.v2.activity.DistanceData = <factory>, position_data: terra.models.v2.activity.PositionData = <factory>, active_durations_data: terra.models.v2.activity.ActiveDurationsData = <factory>, MET_data: terra.models.v2.activity.METData = <factory>, movement_data: terra.models.v2.activity.MovementData = <factory>, calories_data: terra.models.v2.activity.CaloriesData = <factory>, work_data: terra.models.v2.activity.WorkData = <factory>, power_data: terra.models.v2.activity.PowerData = <factory>, energy_data: terra.models.v2.activity.EnergyData = <factory>, TSS_data: terra.models.v2.activity.TSSData = <factory>, heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>, strain_data: terra.models.v2.activity.StrainData = <factory>, oxygen_data: terra.models.v2.activity.OxygenData = <factory>, polyline_map_data: terra.models.v2.activity.PolylineMapData = <factory>, device_data: terra.models.v2.activity.DeviceData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.Activity.__init__", "modulename": "terra.models.v2.activity", "qualname": "Activity.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.activity.Metadata = <factory>,\n    lap_data: terra.models.v2.activity.LapData = <factory>,\n    distance_data: terra.models.v2.activity.DistanceData = <factory>,\n    position_data: terra.models.v2.activity.PositionData = <factory>,\n    active_durations_data: terra.models.v2.activity.ActiveDurationsData = <factory>,\n    MET_data: terra.models.v2.activity.METData = <factory>,\n    movement_data: terra.models.v2.activity.MovementData = <factory>,\n    calories_data: terra.models.v2.activity.CaloriesData = <factory>,\n    work_data: terra.models.v2.activity.WorkData = <factory>,\n    power_data: terra.models.v2.activity.PowerData = <factory>,\n    energy_data: terra.models.v2.activity.EnergyData = <factory>,\n    TSS_data: terra.models.v2.activity.TSSData = <factory>,\n    heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>,\n    strain_data: terra.models.v2.activity.StrainData = <factory>,\n    oxygen_data: terra.models.v2.activity.OxygenData = <factory>,\n    polyline_map_data: terra.models.v2.activity.PolylineMapData = <factory>,\n    device_data: terra.models.v2.activity.DeviceData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.Metadata", "modulename": "terra.models.v2.activity", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(name: Optional[str] = None, type: Optional[int] = None, summary_id: Optional[str] = None, start_time: Optional[str] = None, end_time: Optional[str] = None, city: Optional[str] = None, state: Optional[str] = None, country: Optional[str] = None, upload_type: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.Metadata.__init__", "modulename": "terra.models.v2.activity", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    name: Optional[str] = None,\n    type: Optional[int] = None,\n    summary_id: Optional[str] = None,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    city: Optional[str] = None,\n    state: Optional[str] = None,\n    country: Optional[str] = None,\n    upload_type: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.Metadata.name", "modulename": "terra.models.v2.activity", "qualname": "Metadata.name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.type", "modulename": "terra.models.v2.activity", "qualname": "Metadata.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.summary_id", "modulename": "terra.models.v2.activity", "qualname": "Metadata.summary_id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.start_time", "modulename": "terra.models.v2.activity", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.end_time", "modulename": "terra.models.v2.activity", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.city", "modulename": "terra.models.v2.activity", "qualname": "Metadata.city", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.state", "modulename": "terra.models.v2.activity", "qualname": "Metadata.state", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.country", "modulename": "terra.models.v2.activity", "qualname": "Metadata.country", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.Metadata.upload_type", "modulename": "terra.models.v2.activity", "qualname": "Metadata.upload_type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.LapData", "modulename": "terra.models.v2.activity", "qualname": "LapData", "type": "class", "doc": "<p>LapData(laps: List[terra.models.v2.samples.LapSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.LapData.__init__", "modulename": "terra.models.v2.activity", "qualname": "LapData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, laps: List[terra.models.v2.samples.LapSample] = <factory>)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.StrainData", "modulename": "terra.models.v2.activity", "qualname": "StrainData", "type": "class", "doc": "<p>StrainData(strain_level: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.StrainData.__init__", "modulename": "terra.models.v2.activity", "qualname": "StrainData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, strain_level: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.StrainData.strain_level", "modulename": "terra.models.v2.activity", "qualname": "StrainData.strain_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.SwimmingSummary", "modulename": "terra.models.v2.activity", "qualname": "SwimmingSummary", "type": "class", "doc": "<p>SwimmingSummary(num_laps: Optional[int] = None, num_strokes: Optional[int] = None, pool_length_meters: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.SwimmingSummary.__init__", "modulename": "terra.models.v2.activity", "qualname": "SwimmingSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    num_laps: Optional[int] = None,\n    num_strokes: Optional[int] = None,\n    pool_length_meters: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.SwimmingSummary.num_laps", "modulename": "terra.models.v2.activity", "qualname": "SwimmingSummary.num_laps", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.SwimmingSummary.num_strokes", "modulename": "terra.models.v2.activity", "qualname": "SwimmingSummary.num_strokes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.SwimmingSummary.pool_length_meters", "modulename": "terra.models.v2.activity", "qualname": "SwimmingSummary.pool_length_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary", "type": "class", "doc": "<p>ElevationSummary(gain_planned_meters: Optional[float] = None, gain_actual_meters: Optional[float] = None, loss_actual_meters: Optional[float] = None, min_meters: Optional[float] = None, avg_meters: Optional[float] = None, max_meters: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.ElevationSummary.__init__", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    gain_planned_meters: Optional[float] = None,\n    gain_actual_meters: Optional[float] = None,\n    loss_actual_meters: Optional[float] = None,\n    min_meters: Optional[float] = None,\n    avg_meters: Optional[float] = None,\n    max_meters: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.ElevationSummary.gain_planned_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.gain_planned_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary.gain_actual_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.gain_actual_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary.loss_actual_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.loss_actual_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary.min_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.min_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary.avg_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.avg_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ElevationSummary.max_meters", "modulename": "terra.models.v2.activity", "qualname": "ElevationSummary.max_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DistanceDataSummary", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataSummary", "type": "class", "doc": "<p>DistanceDataSummary(distance_meters: Optional[float] = None, steps: Optional[int] = None, floors_climbed: Optional[int] = None, swimming: terra.models.v2.activity.SwimmingSummary = <factory>, elevation: terra.models.v2.activity.ElevationSummary = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.DistanceDataSummary.__init__", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    distance_meters: Optional[float] = None,\n    steps: Optional[int] = None,\n    floors_climbed: Optional[int] = None,\n    swimming: terra.models.v2.activity.SwimmingSummary = <factory>,\n    elevation: terra.models.v2.activity.ElevationSummary = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.DistanceDataSummary.distance_meters", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataSummary.distance_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DistanceDataSummary.steps", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataSummary.steps", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DistanceDataSummary.floors_climbed", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataSummary.floors_climbed", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DistanceDataDetailed", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataDetailed", "type": "class", "doc": "<p>DistanceDataDetailed(distance_samples: List[terra.models.v2.samples.DistanceSample] = <factory>, elevation_samples: List[terra.models.v2.samples.ElevationSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.DistanceDataDetailed.__init__", "modulename": "terra.models.v2.activity", "qualname": "DistanceDataDetailed.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    distance_samples: List[terra.models.v2.samples.DistanceSample] = <factory>,\n    elevation_samples: List[terra.models.v2.samples.ElevationSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.DistanceData", "modulename": "terra.models.v2.activity", "qualname": "DistanceData", "type": "class", "doc": "<p>DistanceData(summary: terra.models.v2.activity.DistanceDataSummary = <factory>, detailed: terra.models.v2.activity.DistanceDataDetailed = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.DistanceData.__init__", "modulename": "terra.models.v2.activity", "qualname": "DistanceData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    summary: terra.models.v2.activity.DistanceDataSummary = <factory>,\n    detailed: terra.models.v2.activity.DistanceDataDetailed = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.PositionData", "modulename": "terra.models.v2.activity", "qualname": "PositionData", "type": "class", "doc": "<p>PositionData(start_pos_lat_lng: List[float] = <factory>, centre_pos_lat_lng: List[float] = <factory>, end_pos_lat_lng: List[float] = <factory>, position_samples: List[terra.models.v2.samples.PositionSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.PositionData.__init__", "modulename": "terra.models.v2.activity", "qualname": "PositionData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_pos_lat_lng: List[float] = <factory>,\n    centre_pos_lat_lng: List[float] = <factory>,\n    end_pos_lat_lng: List[float] = <factory>,\n    position_samples: List[terra.models.v2.samples.PositionSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData", "type": "class", "doc": "<p>ActiveDurationsData(activity_seconds: Optional[float] = None, inactivity_seconds: Optional[float] = None, rest_seconds: Optional[float] = None, low_intensity_seconds: Optional[float] = None, moderate_intensity_seconds: Optional[float] = None, vigorous_intensity_seconds: Optional[float] = None, num_continuous_inactive_periods: Optional[int] = None, activity_levels_samples: List[terra.models.v2.samples.ActivityLevelSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.__init__", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    activity_seconds: Optional[float] = None,\n    inactivity_seconds: Optional[float] = None,\n    rest_seconds: Optional[float] = None,\n    low_intensity_seconds: Optional[float] = None,\n    moderate_intensity_seconds: Optional[float] = None,\n    vigorous_intensity_seconds: Optional[float] = None,\n    num_continuous_inactive_periods: Optional[int] = None,\n    activity_levels_samples: List[terra.models.v2.samples.ActivityLevelSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.activity_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.activity_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.inactivity_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.inactivity_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.rest_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.rest_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.low_intensity_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.low_intensity_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.moderate_intensity_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.moderate_intensity_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.vigorous_intensity_seconds", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.vigorous_intensity_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.ActiveDurationsData.num_continuous_inactive_periods", "modulename": "terra.models.v2.activity", "qualname": "ActiveDurationsData.num_continuous_inactive_periods", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.METData", "modulename": "terra.models.v2.activity", "qualname": "METData", "type": "class", "doc": "<p>METData(avg_level: Optional[float] = None, num_inactive_minutes: Optional[float] = None, num_low_intensity_minutes: Optional[float] = None, num_moderate_intensity_minutes: Optional[float] = None, num_high_intensity_minutes: Optional[float] = None, MET_samples: List[terra.models.v2.samples.METSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.METData.__init__", "modulename": "terra.models.v2.activity", "qualname": "METData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    avg_level: Optional[float] = None,\n    num_inactive_minutes: Optional[float] = None,\n    num_low_intensity_minutes: Optional[float] = None,\n    num_moderate_intensity_minutes: Optional[float] = None,\n    num_high_intensity_minutes: Optional[float] = None,\n    MET_samples: List[terra.models.v2.samples.METSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.METData.avg_level", "modulename": "terra.models.v2.activity", "qualname": "METData.avg_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.METData.num_inactive_minutes", "modulename": "terra.models.v2.activity", "qualname": "METData.num_inactive_minutes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.METData.num_low_intensity_minutes", "modulename": "terra.models.v2.activity", "qualname": "METData.num_low_intensity_minutes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.METData.num_moderate_intensity_minutes", "modulename": "terra.models.v2.activity", "qualname": "METData.num_moderate_intensity_minutes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.METData.num_high_intensity_minutes", "modulename": "terra.models.v2.activity", "qualname": "METData.num_high_intensity_minutes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData", "modulename": "terra.models.v2.activity", "qualname": "MovementData", "type": "class", "doc": "<p>MovementData(avg_speed_meters_per_second: Optional[float] = None, max_speed_meters_per_second: Optional[float] = None, normalized_speed_meters_per_second: Optional[float] = None, avg_pace_minutes_per_kilometer: Optional[float] = None, max_pace_minutes_per_kilometer: Optional[float] = None, avg_velocity_meters_per_second: Optional[float] = None, max_velocity_meters_per_second: Optional[float] = None, avg_cadence_rpm: Optional[float] = None, max_cadence_rpm: Optional[float] = None, avg_torque_newton_meters: Optional[float] = None, max_torque_newton_meters: Optional[float] = None, cadence_samples: List[terra.models.v2.samples.CadenceSample] = <factory>, speed_samples: List[terra.models.v2.samples.SpeedSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.MovementData.__init__", "modulename": "terra.models.v2.activity", "qualname": "MovementData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    avg_speed_meters_per_second: Optional[float] = None,\n    max_speed_meters_per_second: Optional[float] = None,\n    normalized_speed_meters_per_second: Optional[float] = None,\n    avg_pace_minutes_per_kilometer: Optional[float] = None,\n    max_pace_minutes_per_kilometer: Optional[float] = None,\n    avg_velocity_meters_per_second: Optional[float] = None,\n    max_velocity_meters_per_second: Optional[float] = None,\n    avg_cadence_rpm: Optional[float] = None,\n    max_cadence_rpm: Optional[float] = None,\n    avg_torque_newton_meters: Optional[float] = None,\n    max_torque_newton_meters: Optional[float] = None,\n    cadence_samples: List[terra.models.v2.samples.CadenceSample] = <factory>,\n    speed_samples: List[terra.models.v2.samples.SpeedSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.MovementData.avg_speed_meters_per_second", "modulename": "terra.models.v2.activity", "qualname": "MovementData.avg_speed_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.max_speed_meters_per_second", "modulename": "terra.models.v2.activity", "qualname": "MovementData.max_speed_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.normalized_speed_meters_per_second", "modulename": "terra.models.v2.activity", "qualname": "MovementData.normalized_speed_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.avg_pace_minutes_per_kilometer", "modulename": "terra.models.v2.activity", "qualname": "MovementData.avg_pace_minutes_per_kilometer", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.max_pace_minutes_per_kilometer", "modulename": "terra.models.v2.activity", "qualname": "MovementData.max_pace_minutes_per_kilometer", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.avg_velocity_meters_per_second", "modulename": "terra.models.v2.activity", "qualname": "MovementData.avg_velocity_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.max_velocity_meters_per_second", "modulename": "terra.models.v2.activity", "qualname": "MovementData.max_velocity_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.avg_cadence_rpm", "modulename": "terra.models.v2.activity", "qualname": "MovementData.avg_cadence_rpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.max_cadence_rpm", "modulename": "terra.models.v2.activity", "qualname": "MovementData.max_cadence_rpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.avg_torque_newton_meters", "modulename": "terra.models.v2.activity", "qualname": "MovementData.avg_torque_newton_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.MovementData.max_torque_newton_meters", "modulename": "terra.models.v2.activity", "qualname": "MovementData.max_torque_newton_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.CaloriesData", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData", "type": "class", "doc": "<p>CaloriesData(net_activity_calories: Optional[float] = None, BMR_calories: Optional[float] = None, total_burned_calories: Optional[float] = None, net_intake_calories: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.CaloriesData.__init__", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    net_activity_calories: Optional[float] = None,\n    BMR_calories: Optional[float] = None,\n    total_burned_calories: Optional[float] = None,\n    net_intake_calories: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.CaloriesData.net_activity_calories", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData.net_activity_calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.CaloriesData.BMR_calories", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData.BMR_calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.CaloriesData.total_burned_calories", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData.total_burned_calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.CaloriesData.net_intake_calories", "modulename": "terra.models.v2.activity", "qualname": "CaloriesData.net_intake_calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.WorkData", "modulename": "terra.models.v2.activity", "qualname": "WorkData", "type": "class", "doc": "<p>WorkData(work_kilojoules: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.WorkData.__init__", "modulename": "terra.models.v2.activity", "qualname": "WorkData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, work_kilojoules: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.WorkData.work_kilojoules", "modulename": "terra.models.v2.activity", "qualname": "WorkData.work_kilojoules", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.PowerData", "modulename": "terra.models.v2.activity", "qualname": "PowerData", "type": "class", "doc": "<p>PowerData(avg_watts: Optional[float] = None, max_watts: Optional[float] = None, power_samples: List[terra.models.v2.samples.PowerSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.PowerData.__init__", "modulename": "terra.models.v2.activity", "qualname": "PowerData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    avg_watts: Optional[float] = None,\n    max_watts: Optional[float] = None,\n    power_samples: List[terra.models.v2.samples.PowerSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.PowerData.avg_watts", "modulename": "terra.models.v2.activity", "qualname": "PowerData.avg_watts", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.PowerData.max_watts", "modulename": "terra.models.v2.activity", "qualname": "PowerData.max_watts", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.EnergyData", "modulename": "terra.models.v2.activity", "qualname": "EnergyData", "type": "class", "doc": "<p>EnergyData(energy_kilojoules: Optional[float] = None, energy_planned_kilojoules: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.EnergyData.__init__", "modulename": "terra.models.v2.activity", "qualname": "EnergyData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    energy_kilojoules: Optional[float] = None,\n    energy_planned_kilojoules: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.EnergyData.energy_kilojoules", "modulename": "terra.models.v2.activity", "qualname": "EnergyData.energy_kilojoules", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.EnergyData.energy_planned_kilojoules", "modulename": "terra.models.v2.activity", "qualname": "EnergyData.energy_planned_kilojoules", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.TSSData", "modulename": "terra.models.v2.activity", "qualname": "TSSData", "type": "class", "doc": "<p>TSSData(TSS_samples: List[terra.models.v2.samples.TSSSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.TSSData.__init__", "modulename": "terra.models.v2.activity", "qualname": "TSSData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    TSS_samples: List[terra.models.v2.samples.TSSSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary", "type": "class", "doc": "<p>HeartRateDataSummary(avg_hr_bpm: Optional[float] = None, max_hr_bpm: Optional[float] = None, min_hr_bpm: Optional[float] = None, avg_hr: Optional[float] = None, max_hr: Optional[float] = None, min_hr: Optional[float] = None, avg_hrv_rmssd: Optional[float] = None, avg_hrv_sdnn: Optional[float] = None, user_max_hr_bpm: Optional[float] = None, resting_hr_bpm: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.__init__", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    avg_hr_bpm: Optional[float] = None,\n    max_hr_bpm: Optional[float] = None,\n    min_hr_bpm: Optional[float] = None,\n    avg_hr: Optional[float] = None,\n    max_hr: Optional[float] = None,\n    min_hr: Optional[float] = None,\n    avg_hrv_rmssd: Optional[float] = None,\n    avg_hrv_sdnn: Optional[float] = None,\n    user_max_hr_bpm: Optional[float] = None,\n    resting_hr_bpm: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.avg_hr_bpm", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.avg_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.max_hr_bpm", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.max_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.min_hr_bpm", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.min_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.avg_hr", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.avg_hr", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.max_hr", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.max_hr", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.min_hr", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.min_hr", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.avg_hrv_rmssd", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.avg_hrv_rmssd", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.avg_hrv_sdnn", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.avg_hrv_sdnn", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.user_max_hr_bpm", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.user_max_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataSummary.resting_hr_bpm", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataSummary.resting_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.HeartRateDataDetailed", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataDetailed", "type": "class", "doc": "<p>HeartRateDataDetailed(hr_samples: List[terra.models.v2.samples.HeartRateDataSample] = <factory>, hrv_samples_rmssd: List[terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD] = <factory>, hrv_samples_sdnn: List[terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.HeartRateDataDetailed.__init__", "modulename": "terra.models.v2.activity", "qualname": "HeartRateDataDetailed.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    hr_samples: List[terra.models.v2.samples.HeartRateDataSample] = <factory>,\n    hrv_samples_rmssd: List[terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD] = <factory>,\n    hrv_samples_sdnn: List[terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.HeartRateData", "modulename": "terra.models.v2.activity", "qualname": "HeartRateData", "type": "class", "doc": "<p>HeartRateData(summary: terra.models.v2.activity.HeartRateDataSummary = <factory>, detailed: terra.models.v2.activity.HeartRateDataDetailed = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.HeartRateData.__init__", "modulename": "terra.models.v2.activity", "qualname": "HeartRateData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    summary: terra.models.v2.activity.HeartRateDataSummary = <factory>,\n    detailed: terra.models.v2.activity.HeartRateDataDetailed = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.OxygenData", "modulename": "terra.models.v2.activity", "qualname": "OxygenData", "type": "class", "doc": "<p>OxygenData(vo2max_ml_per_min_per_kg: Optional[float] = None, avg_saturation_percentage: Optional[float] = None, saturation_samples: List[terra.models.v2.samples.OxygenSaturationSample] = <factory>, vo2_samples: List[terra.models.v2.samples.Vo2MaxSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.OxygenData.__init__", "modulename": "terra.models.v2.activity", "qualname": "OxygenData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    vo2max_ml_per_min_per_kg: Optional[float] = None,\n    avg_saturation_percentage: Optional[float] = None,\n    saturation_samples: List[terra.models.v2.samples.OxygenSaturationSample] = <factory>,\n    vo2_samples: List[terra.models.v2.samples.Vo2MaxSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.OxygenData.vo2max_ml_per_min_per_kg", "modulename": "terra.models.v2.activity", "qualname": "OxygenData.vo2max_ml_per_min_per_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.OxygenData.avg_saturation_percentage", "modulename": "terra.models.v2.activity", "qualname": "OxygenData.avg_saturation_percentage", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.PolylineMapData", "modulename": "terra.models.v2.activity", "qualname": "PolylineMapData", "type": "class", "doc": "<p>PolylineMapData(summary_polyline: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.PolylineMapData.__init__", "modulename": "terra.models.v2.activity", "qualname": "PolylineMapData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, summary_polyline: Optional[str] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.PolylineMapData.summary_polyline", "modulename": "terra.models.v2.activity", "qualname": "PolylineMapData.summary_polyline", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData", "modulename": "terra.models.v2.activity", "qualname": "DeviceData", "type": "class", "doc": "<p>DeviceData(name: Optional[str] = None, activation_timestamp: Optional[str] = None, manufacturer: Optional[str] = None, serial_number: Optional[str] = None, software_version: Optional[str] = None, hardware_version: Optional[str] = None, other_devices: List[terra.models.v2.samples.OtherDeviceData] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity.DeviceData.__init__", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    name: Optional[str] = None,\n    activation_timestamp: Optional[str] = None,\n    manufacturer: Optional[str] = None,\n    serial_number: Optional[str] = None,\n    software_version: Optional[str] = None,\n    hardware_version: Optional[str] = None,\n    other_devices: List[terra.models.v2.samples.OtherDeviceData] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity.DeviceData.name", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData.activation_timestamp", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.activation_timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData.manufacturer", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.manufacturer", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData.serial_number", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.serial_number", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData.software_version", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.software_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity.DeviceData.hardware_version", "modulename": "terra.models.v2.activity", "qualname": "DeviceData.hardware_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample", "modulename": "terra.models.v2.activity_sample", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample", "type": "class", "doc": "<p>ActivitySample(timestamp: Optional[str] = None, active_duration_seconds: Optional[int] = None, altitude_in_meters: Optional[float] = None, calories: Optional[float] = None, distance_in_km: Optional[float] = None, heartrate_bpm: Optional[float] = None, coordinates_lat_lng: List[float] = <factory>, rep_count: Optional[int] = None, resting_duration_seconds: Optional[int] = None, speed_in_meters_per_seconds: Optional[float] = None, spo2_percentage: Optional[float] = None, status: Optional[str] = None, swimming_laps: Optional[float] = None, swimming_strokes: Optional[int] = None, vo2_volume_ml_per_min_per_kg: Optional[float] = None, vo2_max_volume_ml_per_min_per_kg: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.__init__", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    active_duration_seconds: Optional[int] = None,\n    altitude_in_meters: Optional[float] = None,\n    calories: Optional[float] = None,\n    distance_in_km: Optional[float] = None,\n    heartrate_bpm: Optional[float] = None,\n    coordinates_lat_lng: List[float] = <factory>,\n    rep_count: Optional[int] = None,\n    resting_duration_seconds: Optional[int] = None,\n    speed_in_meters_per_seconds: Optional[float] = None,\n    spo2_percentage: Optional[float] = None,\n    status: Optional[str] = None,\n    swimming_laps: Optional[float] = None,\n    swimming_strokes: Optional[int] = None,\n    vo2_volume_ml_per_min_per_kg: Optional[float] = None,\n    vo2_max_volume_ml_per_min_per_kg: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.timestamp", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.active_duration_seconds", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.active_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.altitude_in_meters", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.altitude_in_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.calories", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.distance_in_km", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.distance_in_km", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.heartrate_bpm", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.heartrate_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.rep_count", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.rep_count", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.resting_duration_seconds", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.resting_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.speed_in_meters_per_seconds", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.speed_in_meters_per_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.spo2_percentage", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.spo2_percentage", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.status", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.status", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.swimming_laps", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.swimming_laps", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.swimming_strokes", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.swimming_strokes", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.vo2_volume_ml_per_min_per_kg", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.vo2_volume_ml_per_min_per_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.activity_sample.ActivitySample.vo2_max_volume_ml_per_min_per_kg", "modulename": "terra.models.v2.activity_sample", "qualname": "ActivitySample.vo2_max_volume_ml_per_min_per_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete", "modulename": "terra.models.v2.athlete", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.athlete.Athlete", "modulename": "terra.models.v2.athlete", "qualname": "Athlete", "type": "class", "doc": "<p>Athlete(first_name: Optional[str] = None, last_name: Optional[str] = None, gender: Optional[str] = None, sex: Optional[str] = None, age: Optional[int] = None, date_of_birth: Optional[str] = None, bio: Optional[str] = None, email: Optional[str] = None, city: Optional[str] = None, state: Optional[str] = None, country: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.athlete.Athlete.__init__", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    first_name: Optional[str] = None,\n    last_name: Optional[str] = None,\n    gender: Optional[str] = None,\n    sex: Optional[str] = None,\n    age: Optional[int] = None,\n    date_of_birth: Optional[str] = None,\n    bio: Optional[str] = None,\n    email: Optional[str] = None,\n    city: Optional[str] = None,\n    state: Optional[str] = None,\n    country: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.athlete.Athlete.first_name", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.first_name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.last_name", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.last_name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.gender", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.gender", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.sex", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.sex", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.age", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.age", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.date_of_birth", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.date_of_birth", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.bio", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.bio", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.email", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.email", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.city", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.city", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.state", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.state", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.Athlete.country", "modulename": "terra.models.v2.athlete", "qualname": "Athlete.country", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.athlete.AthleteCollection", "modulename": "terra.models.v2.athlete", "qualname": "AthleteCollection", "type": "class", "doc": "<p>AthleteCollection(user: terra.models.user.User, athlete: terra.models.v2.athlete.Athlete, type: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.athlete.AthleteCollection.__init__", "modulename": "terra.models.v2.athlete", "qualname": "AthleteCollection.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    user: terra.models.user.User,\n    athlete: terra.models.v2.athlete.Athlete,\n    type: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.athlete.AthleteCollection.type", "modulename": "terra.models.v2.athlete", "qualname": "AthleteCollection.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body", "modulename": "terra.models.v2.body", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.body.Body", "modulename": "terra.models.v2.body", "qualname": "Body", "type": "class", "doc": "<p>Body(metadata: terra.models.v2.body.Metadata = <factory>, measurements_data: terra.models.v2.body.MeasurementsData = <factory>, temperature_data: terra.models.v2.body.TemperatureData = <factory>, hydration_data: terra.models.v2.body.HydrationData = <factory>, oxygen_data: terra.models.v2.activity.OxygenData = <factory>, heart_data: terra.models.v2.body.HeartData = <factory>, blood_pressure_data: terra.models.v2.body.BloodPressureData = <factory>, glucose_data: terra.models.v2.body.GlucoseData = <factory>, device_data: terra.models.v2.body.DeviceData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.Body.__init__", "modulename": "terra.models.v2.body", "qualname": "Body.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.body.Metadata = <factory>,\n    measurements_data: terra.models.v2.body.MeasurementsData = <factory>,\n    temperature_data: terra.models.v2.body.TemperatureData = <factory>,\n    hydration_data: terra.models.v2.body.HydrationData = <factory>,\n    oxygen_data: terra.models.v2.activity.OxygenData = <factory>,\n    heart_data: terra.models.v2.body.HeartData = <factory>,\n    blood_pressure_data: terra.models.v2.body.BloodPressureData = <factory>,\n    glucose_data: terra.models.v2.body.GlucoseData = <factory>,\n    device_data: terra.models.v2.body.DeviceData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.BloodPressureData", "modulename": "terra.models.v2.body", "qualname": "BloodPressureData", "type": "class", "doc": "<p>BloodPressureData(blood_pressure_samples: List[terra.models.v2.samples.BloodPressureSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.BloodPressureData.__init__", "modulename": "terra.models.v2.body", "qualname": "BloodPressureData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    blood_pressure_samples: List[terra.models.v2.samples.BloodPressureSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.GlucoseData", "modulename": "terra.models.v2.body", "qualname": "GlucoseData", "type": "class", "doc": "<p>GlucoseData(day_avg_blood_glucose_mg_per_dL: Optional[float] = None, blood_glucose_samples: List[terra.models.v2.samples.GlucoseDataSample] = <factory>, detailed_blood_glucose_samples: List[terra.models.v2.samples.GlucoseDataSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.GlucoseData.__init__", "modulename": "terra.models.v2.body", "qualname": "GlucoseData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    day_avg_blood_glucose_mg_per_dL: Optional[float] = None,\n    blood_glucose_samples: List[terra.models.v2.samples.GlucoseDataSample] = <factory>,\n    detailed_blood_glucose_samples: List[terra.models.v2.samples.GlucoseDataSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.GlucoseData.day_avg_blood_glucose_mg_per_dL", "modulename": "terra.models.v2.body", "qualname": "GlucoseData.day_avg_blood_glucose_mg_per_dL", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.Metadata", "modulename": "terra.models.v2.body", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(start_time: Optional[str] = None, end_time: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.Metadata.__init__", "modulename": "terra.models.v2.body", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.Metadata.start_time", "modulename": "terra.models.v2.body", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.Metadata.end_time", "modulename": "terra.models.v2.body", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData", "modulename": "terra.models.v2.body", "qualname": "DeviceData", "type": "class", "doc": "<p>DeviceData(name: Optional[str] = None, activation_timestamp: Optional[str] = None, manufacturer: Optional[str] = None, serial_number: Optional[str] = None, software_version: Optional[str] = None, hardware_version: Optional[str] = None, other_devices: List[terra.models.v2.samples.OtherDeviceData] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.DeviceData.__init__", "modulename": "terra.models.v2.body", "qualname": "DeviceData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    name: Optional[str] = None,\n    activation_timestamp: Optional[str] = None,\n    manufacturer: Optional[str] = None,\n    serial_number: Optional[str] = None,\n    software_version: Optional[str] = None,\n    hardware_version: Optional[str] = None,\n    other_devices: List[terra.models.v2.samples.OtherDeviceData] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.DeviceData.name", "modulename": "terra.models.v2.body", "qualname": "DeviceData.name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData.activation_timestamp", "modulename": "terra.models.v2.body", "qualname": "DeviceData.activation_timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData.manufacturer", "modulename": "terra.models.v2.body", "qualname": "DeviceData.manufacturer", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData.serial_number", "modulename": "terra.models.v2.body", "qualname": "DeviceData.serial_number", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData.software_version", "modulename": "terra.models.v2.body", "qualname": "DeviceData.software_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.DeviceData.hardware_version", "modulename": "terra.models.v2.body", "qualname": "DeviceData.hardware_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.MeasurementsData", "modulename": "terra.models.v2.body", "qualname": "MeasurementsData", "type": "class", "doc": "<p>MeasurementsData(measurements: List[terra.models.v2.samples.MeasurementDataSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.MeasurementsData.__init__", "modulename": "terra.models.v2.body", "qualname": "MeasurementsData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    measurements: List[terra.models.v2.samples.MeasurementDataSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.TemperatureData", "modulename": "terra.models.v2.body", "qualname": "TemperatureData", "type": "class", "doc": "<p>TemperatureData(ambient_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>, body_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>, skin_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.TemperatureData.__init__", "modulename": "terra.models.v2.body", "qualname": "TemperatureData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    ambient_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>,\n    body_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>,\n    skin_temperature_samples: List[terra.models.v2.samples.TemperatureSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.HydrationData", "modulename": "terra.models.v2.body", "qualname": "HydrationData", "type": "class", "doc": "<p>HydrationData(hydration_amount_samples: List[terra.models.v2.samples.HydrationMeasurementSample] = <factory>, day_total_water_consumption_ml: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.HydrationData.__init__", "modulename": "terra.models.v2.body", "qualname": "HydrationData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    hydration_amount_samples: List[terra.models.v2.samples.HydrationMeasurementSample] = <factory>,\n    day_total_water_consumption_ml: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.body.HydrationData.day_total_water_consumption_ml", "modulename": "terra.models.v2.body", "qualname": "HydrationData.day_total_water_consumption_ml", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.body.HeartData", "modulename": "terra.models.v2.body", "qualname": "HeartData", "type": "class", "doc": "<p>HeartData(heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>, pulse_wave_velocity_samples: List[terra.models.v2.samples.PulseVelocitySample] = <factory>, afib_classification_samples: List[terra.models.v2.samples.AFibClassificationSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.body.HeartData.__init__", "modulename": "terra.models.v2.body", "qualname": "HeartData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>,\n    pulse_wave_velocity_samples: List[terra.models.v2.samples.PulseVelocitySample] = <factory>,\n    afib_classification_samples: List[terra.models.v2.samples.AFibClassificationSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily", "modulename": "terra.models.v2.daily", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.daily.Daily", "modulename": "terra.models.v2.daily", "qualname": "Daily", "type": "class", "doc": "<p>Daily(metadata: terra.models.v2.daily.Metadata = <factory>, active_durations_data: terra.models.v2.activity.ActiveDurationsData = <factory>, distance_data: terra.models.v2.daily.DistanceData = <factory>, heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>, calories_data: terra.models.v2.activity.CaloriesData = <factory>, MET_data: terra.models.v2.activity.METData = <factory>, stress_data: terra.models.v2.daily.StressData = <factory>, oxygen_data: terra.models.v2.activity.OxygenData = <factory>, device_data: terra.models.v2.activity.DeviceData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.daily.Daily.__init__", "modulename": "terra.models.v2.daily", "qualname": "Daily.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.daily.Metadata = <factory>,\n    active_durations_data: terra.models.v2.activity.ActiveDurationsData = <factory>,\n    distance_data: terra.models.v2.daily.DistanceData = <factory>,\n    heart_rate_data: terra.models.v2.activity.HeartRateData = <factory>,\n    calories_data: terra.models.v2.activity.CaloriesData = <factory>,\n    MET_data: terra.models.v2.activity.METData = <factory>,\n    stress_data: terra.models.v2.daily.StressData = <factory>,\n    oxygen_data: terra.models.v2.activity.OxygenData = <factory>,\n    device_data: terra.models.v2.activity.DeviceData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily.Metadata", "modulename": "terra.models.v2.daily", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(start_time: Optional[str] = None, end_time: Optional[str] = None, upload_type: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.daily.Metadata.__init__", "modulename": "terra.models.v2.daily", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    upload_type: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily.Metadata.start_time", "modulename": "terra.models.v2.daily", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.Metadata.end_time", "modulename": "terra.models.v2.daily", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.Metadata.upload_type", "modulename": "terra.models.v2.daily", "qualname": "Metadata.upload_type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.DistanceDataDetailed", "modulename": "terra.models.v2.daily", "qualname": "DistanceDataDetailed", "type": "class", "doc": "<p>DistanceDataDetailed(step_samples: List[terra.models.v2.samples.StepSample] = <factory>, distance_samples: List[terra.models.v2.samples.DistanceSample] = <factory>, elevation_samples: List[terra.models.v2.samples.ElevationSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.daily.DistanceDataDetailed.__init__", "modulename": "terra.models.v2.daily", "qualname": "DistanceDataDetailed.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    step_samples: List[terra.models.v2.samples.StepSample] = <factory>,\n    distance_samples: List[terra.models.v2.samples.DistanceSample] = <factory>,\n    elevation_samples: List[terra.models.v2.samples.ElevationSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily.DistanceData", "modulename": "terra.models.v2.daily", "qualname": "DistanceData", "type": "class", "doc": "<p>DistanceData(distance_meters: Optional[float] = None, steps: Optional[int] = None, floors_climbed: Optional[int] = None, swimming: terra.models.v2.activity.SwimmingSummary = <factory>, elevation: terra.models.v2.activity.ElevationSummary = <factory>, detailed: terra.models.v2.daily.DistanceDataDetailed = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.daily.DistanceData.__init__", "modulename": "terra.models.v2.daily", "qualname": "DistanceData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    distance_meters: Optional[float] = None,\n    steps: Optional[int] = None,\n    floors_climbed: Optional[int] = None,\n    swimming: terra.models.v2.activity.SwimmingSummary = <factory>,\n    elevation: terra.models.v2.activity.ElevationSummary = <factory>,\n    detailed: terra.models.v2.daily.DistanceDataDetailed = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily.DistanceData.distance_meters", "modulename": "terra.models.v2.daily", "qualname": "DistanceData.distance_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.DistanceData.steps", "modulename": "terra.models.v2.daily", "qualname": "DistanceData.steps", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.DistanceData.floors_climbed", "modulename": "terra.models.v2.daily", "qualname": "DistanceData.floors_climbed", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData", "modulename": "terra.models.v2.daily", "qualname": "StressData", "type": "class", "doc": "<p>StressData(stress_duration_seconds: Optional[float] = None, rest_stress_duration_seconds: Optional[float] = None, activity_stress_duration_seconds: Optional[float] = None, low_stress_duration_seconds: Optional[float] = None, medium_stress_duration_seconds: Optional[float] = None, high_stress_duration_seconds: Optional[float] = None, avg_stress_level: Optional[float] = None, max_stress_level: Optional[float] = None, samples: List[terra.models.v2.samples.StressSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.daily.StressData.__init__", "modulename": "terra.models.v2.daily", "qualname": "StressData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    stress_duration_seconds: Optional[float] = None,\n    rest_stress_duration_seconds: Optional[float] = None,\n    activity_stress_duration_seconds: Optional[float] = None,\n    low_stress_duration_seconds: Optional[float] = None,\n    medium_stress_duration_seconds: Optional[float] = None,\n    high_stress_duration_seconds: Optional[float] = None,\n    avg_stress_level: Optional[float] = None,\n    max_stress_level: Optional[float] = None,\n    samples: List[terra.models.v2.samples.StressSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.daily.StressData.stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.rest_stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.rest_stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.activity_stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.activity_stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.low_stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.low_stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.medium_stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.medium_stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.high_stress_duration_seconds", "modulename": "terra.models.v2.daily", "qualname": "StressData.high_stress_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.avg_stress_level", "modulename": "terra.models.v2.daily", "qualname": "StressData.avg_stress_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.daily.StressData.max_stress_level", "modulename": "terra.models.v2.daily", "qualname": "StressData.max_stress_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation", "modulename": "terra.models.v2.menstruation", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.menstruation.Menstruation", "modulename": "terra.models.v2.menstruation", "qualname": "Menstruation", "type": "class", "doc": "<p>Menstruation(metadata: terra.models.v2.menstruation.Metadata = <factory>, menstruation_data: terra.models.v2.menstruation.MenstruationData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.menstruation.Menstruation.__init__", "modulename": "terra.models.v2.menstruation", "qualname": "Menstruation.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.menstruation.Metadata = <factory>,\n    menstruation_data: terra.models.v2.menstruation.MenstruationData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.menstruation.Metadata", "modulename": "terra.models.v2.menstruation", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(start_time: Optional[str] = None, end_time: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.menstruation.Metadata.__init__", "modulename": "terra.models.v2.menstruation", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.menstruation.Metadata.start_time", "modulename": "terra.models.v2.menstruation", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.Metadata.end_time", "modulename": "terra.models.v2.menstruation", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData", "type": "class", "doc": "<p>MenstruationData(period_start_date: Optional[str] = None, day_in_cycle: Optional[int] = None, period_length_days: Optional[int] = None, current_phase: Optional[int] = None, length_of_current_phase_days: Optional[int] = None, days_until_next_phase: Optional[int] = None, predicted_cycle_length_days: Optional[int] = None, is_predicted_cycle: Optional[str] = None, cycle_length_days: Optional[str] = None, last_updated_time: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.__init__", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    period_start_date: Optional[str] = None,\n    day_in_cycle: Optional[int] = None,\n    period_length_days: Optional[int] = None,\n    current_phase: Optional[int] = None,\n    length_of_current_phase_days: Optional[int] = None,\n    days_until_next_phase: Optional[int] = None,\n    predicted_cycle_length_days: Optional[int] = None,\n    is_predicted_cycle: Optional[str] = None,\n    cycle_length_days: Optional[str] = None,\n    last_updated_time: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.period_start_date", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.period_start_date", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.day_in_cycle", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.day_in_cycle", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.period_length_days", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.period_length_days", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.current_phase", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.current_phase", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.length_of_current_phase_days", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.length_of_current_phase_days", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.days_until_next_phase", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.days_until_next_phase", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.predicted_cycle_length_days", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.predicted_cycle_length_days", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.is_predicted_cycle", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.is_predicted_cycle", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.cycle_length_days", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.cycle_length_days", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.menstruation.MenstruationData.last_updated_time", "modulename": "terra.models.v2.menstruation", "qualname": "MenstruationData.last_updated_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition", "modulename": "terra.models.v2.nutrition", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.nutrition.Nutrition", "modulename": "terra.models.v2.nutrition", "qualname": "Nutrition", "type": "class", "doc": "<p>Nutrition(metadata: terra.models.v2.nutrition.Metadata = <factory>, summary: terra.models.v2.nutrition.NutritionSummary = <factory>, meals: List[terra.models.v2.nutrition.Meal] = <factory>, drink_samples: List[terra.models.v2.samples.DrinkSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Nutrition.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Nutrition.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.nutrition.Metadata = <factory>,\n    summary: terra.models.v2.nutrition.NutritionSummary = <factory>,\n    meals: List[terra.models.v2.nutrition.Meal] = <factory>,\n    drink_samples: List[terra.models.v2.samples.DrinkSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Metadata", "modulename": "terra.models.v2.nutrition", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(start_time: Optional[str] = None, end_time: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Metadata.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Metadata.start_time", "modulename": "terra.models.v2.nutrition", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Metadata.end_time", "modulename": "terra.models.v2.nutrition", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros", "modulename": "terra.models.v2.nutrition", "qualname": "Macros", "type": "class", "doc": "<p>Macros(calories: Optional[float] = None, protein_g: Optional[float] = None, carbohydrates_g: Optional[float] = None, fat_g: Optional[float] = None, trans_fat_g: Optional[float] = None, saturated_fat_g: Optional[float] = None, sugar_g: Optional[float] = None, cholesterol_mg: Optional[float] = None, fiber_g: Optional[float] = None, sodium_mg: Optional[float] = None, alcohol_g: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Macros.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    calories: Optional[float] = None,\n    protein_g: Optional[float] = None,\n    carbohydrates_g: Optional[float] = None,\n    fat_g: Optional[float] = None,\n    trans_fat_g: Optional[float] = None,\n    saturated_fat_g: Optional[float] = None,\n    sugar_g: Optional[float] = None,\n    cholesterol_mg: Optional[float] = None,\n    fiber_g: Optional[float] = None,\n    sodium_mg: Optional[float] = None,\n    alcohol_g: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Macros.calories", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.protein_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.protein_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.carbohydrates_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.carbohydrates_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.fat_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.fat_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.trans_fat_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.trans_fat_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.saturated_fat_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.saturated_fat_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.sugar_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.sugar_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.cholesterol_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.cholesterol_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.fiber_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.fiber_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.sodium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.sodium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Macros.alcohol_g", "modulename": "terra.models.v2.nutrition", "qualname": "Macros.alcohol_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros", "modulename": "terra.models.v2.nutrition", "qualname": "Micros", "type": "class", "doc": "<p>Micros(biotin_mg: Optional[float] = None, caffeine_mg: Optional[float] = None, chloride_mg: Optional[float] = None, chromium_mg: Optional[float] = None, copper_mg: Optional[float] = None, calcium_mg: Optional[float] = None, folate_mg: Optional[float] = None, folic_acid_mg: Optional[float] = None, iodine_mg: Optional[float] = None, iron_mg: Optional[float] = None, magnesium_mg: Optional[float] = None, manganese_mg: Optional[float] = None, molybdenum_mg: Optional[float] = None, monounsaturated_fat_g: Optional[float] = None, niacin_mg: Optional[float] = None, pantothenic_acid_mg: Optional[float] = None, phosphorus_mg: Optional[float] = None, polyunsaturated_fat_g: Optional[float] = None, potassium_mg: Optional[float] = None, riboflavin_mg: Optional[float] = None, selenium_mg: Optional[float] = None, thiamin_mg: Optional[float] = None, vitamin_A_mg: Optional[float] = None, vitamin_B12_mg: Optional[float] = None, vitamin_B6_mg: Optional[float] = None, vitamin_C_mg: Optional[float] = None, vitamin_D_mg: Optional[float] = None, vitamin_E_mg: Optional[float] = None, vitamin_K_mg: Optional[float] = None, zinc_mg: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Micros.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    biotin_mg: Optional[float] = None,\n    caffeine_mg: Optional[float] = None,\n    chloride_mg: Optional[float] = None,\n    chromium_mg: Optional[float] = None,\n    copper_mg: Optional[float] = None,\n    calcium_mg: Optional[float] = None,\n    folate_mg: Optional[float] = None,\n    folic_acid_mg: Optional[float] = None,\n    iodine_mg: Optional[float] = None,\n    iron_mg: Optional[float] = None,\n    magnesium_mg: Optional[float] = None,\n    manganese_mg: Optional[float] = None,\n    molybdenum_mg: Optional[float] = None,\n    monounsaturated_fat_g: Optional[float] = None,\n    niacin_mg: Optional[float] = None,\n    pantothenic_acid_mg: Optional[float] = None,\n    phosphorus_mg: Optional[float] = None,\n    polyunsaturated_fat_g: Optional[float] = None,\n    potassium_mg: Optional[float] = None,\n    riboflavin_mg: Optional[float] = None,\n    selenium_mg: Optional[float] = None,\n    thiamin_mg: Optional[float] = None,\n    vitamin_A_mg: Optional[float] = None,\n    vitamin_B12_mg: Optional[float] = None,\n    vitamin_B6_mg: Optional[float] = None,\n    vitamin_C_mg: Optional[float] = None,\n    vitamin_D_mg: Optional[float] = None,\n    vitamin_E_mg: Optional[float] = None,\n    vitamin_K_mg: Optional[float] = None,\n    zinc_mg: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Micros.biotin_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.biotin_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.caffeine_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.caffeine_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.chloride_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.chloride_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.chromium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.chromium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.copper_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.copper_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.calcium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.calcium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.folate_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.folate_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.folic_acid_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.folic_acid_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.iodine_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.iodine_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.iron_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.iron_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.magnesium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.magnesium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.manganese_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.manganese_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.molybdenum_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.molybdenum_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.monounsaturated_fat_g", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.monounsaturated_fat_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.niacin_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.niacin_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.pantothenic_acid_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.pantothenic_acid_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.phosphorus_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.phosphorus_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.polyunsaturated_fat_g", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.polyunsaturated_fat_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.potassium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.potassium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.riboflavin_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.riboflavin_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.selenium_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.selenium_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.thiamin_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.thiamin_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_A_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_A_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_B12_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_B12_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_B6_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_B6_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_C_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_C_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_D_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_D_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_E_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_E_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.vitamin_K_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.vitamin_K_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Micros.zinc_mg", "modulename": "terra.models.v2.nutrition", "qualname": "Micros.zinc_mg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Quantity", "modulename": "terra.models.v2.nutrition", "qualname": "Quantity", "type": "class", "doc": "<p>Quantity(unit: Optional[int] = None, amount: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Quantity.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Quantity.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, unit: Optional[int] = None, amount: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Quantity.unit", "modulename": "terra.models.v2.nutrition", "qualname": "Quantity.unit", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Quantity.amount", "modulename": "terra.models.v2.nutrition", "qualname": "Quantity.amount", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Meal", "modulename": "terra.models.v2.nutrition", "qualname": "Meal", "type": "class", "doc": "<p>Meal(name: Optional[str] = None, id: Optional[str] = None, type: Optional[int] = 0, quantity: terra.models.v2.nutrition.Quantity = <factory>, macros: terra.models.v2.nutrition.Macros = <factory>, micros: terra.models.v2.nutrition.Micros = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.Meal.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "Meal.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    name: Optional[str] = None,\n    id: Optional[str] = None,\n    type: Optional[int] = 0,\n    quantity: terra.models.v2.nutrition.Quantity = <factory>,\n    macros: terra.models.v2.nutrition.Macros = <factory>,\n    micros: terra.models.v2.nutrition.Micros = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.Meal.name", "modulename": "terra.models.v2.nutrition", "qualname": "Meal.name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Meal.id", "modulename": "terra.models.v2.nutrition", "qualname": "Meal.id", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.Meal.type", "modulename": "terra.models.v2.nutrition", "qualname": "Meal.type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = 0"}, {"fullname": "terra.models.v2.nutrition.NutritionSummary", "modulename": "terra.models.v2.nutrition", "qualname": "NutritionSummary", "type": "class", "doc": "<p>NutritionSummary(water_ml: Optional[float] = None, macros: terra.models.v2.nutrition.Macros = <factory>, drink_ml: Optional[float] = None, micros: terra.models.v2.nutrition.Micros = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.nutrition.NutritionSummary.__init__", "modulename": "terra.models.v2.nutrition", "qualname": "NutritionSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    water_ml: Optional[float] = None,\n    macros: terra.models.v2.nutrition.Macros = <factory>,\n    drink_ml: Optional[float] = None,\n    micros: terra.models.v2.nutrition.Micros = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.nutrition.NutritionSummary.water_ml", "modulename": "terra.models.v2.nutrition", "qualname": "NutritionSummary.water_ml", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.nutrition.NutritionSummary.drink_ml", "modulename": "terra.models.v2.nutrition", "qualname": "NutritionSummary.drink_ml", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples", "modulename": "terra.models.v2.samples", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.samples.GlucoseDataSample", "modulename": "terra.models.v2.samples", "qualname": "GlucoseDataSample", "type": "class", "doc": "<p>GlucoseDataSample(timestamp: Optional[str] = None, blood_glucose_mg_per_dL: Optional[int] = None, glucose_level_flag: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.GlucoseDataSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "GlucoseDataSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    blood_glucose_mg_per_dL: Optional[int] = None,\n    glucose_level_flag: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.GlucoseDataSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "GlucoseDataSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.GlucoseDataSample.blood_glucose_mg_per_dL", "modulename": "terra.models.v2.samples", "qualname": "GlucoseDataSample.blood_glucose_mg_per_dL", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.GlucoseDataSample.glucose_level_flag", "modulename": "terra.models.v2.samples", "qualname": "GlucoseDataSample.glucose_level_flag", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateDataSample", "modulename": "terra.models.v2.samples", "qualname": "HeartRateDataSample", "type": "class", "doc": "<p>HeartRateDataSample(timestamp: Optional[str] = None, bpm: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.HeartRateDataSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "HeartRateDataSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, timestamp: Optional[str] = None, bpm: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.HeartRateDataSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "HeartRateDataSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateDataSample.bpm", "modulename": "terra.models.v2.samples", "qualname": "HeartRateDataSample.bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.LapSample", "modulename": "terra.models.v2.samples", "qualname": "LapSample", "type": "class", "doc": "<p>LapSample(start_time: Optional[str] = None, distance_meters: Optional[float] = None, calories: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.LapSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "LapSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    distance_meters: Optional[float] = None,\n    calories: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.LapSample.start_time", "modulename": "terra.models.v2.samples", "qualname": "LapSample.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.LapSample.distance_meters", "modulename": "terra.models.v2.samples", "qualname": "LapSample.distance_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.LapSample.calories", "modulename": "terra.models.v2.samples", "qualname": "LapSample.calories", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleRMSSD", "type": "class", "doc": "<p>HeartRateVariabilityDataSampleRMSSD(timestamp: Optional[str] = None, hrv_rmssd: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD.__init__", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleRMSSD.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    hrv_rmssd: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD.timestamp", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleRMSSD.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD.hrv_rmssd", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleRMSSD.hrv_rmssd", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleSDNN", "type": "class", "doc": "<p>HeartRateVariabilityDataSampleSDNN(timestamp: Optional[str] = None, hrv_sdnn: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN.__init__", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleSDNN.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    hrv_sdnn: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN.timestamp", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleSDNN.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN.hrv_sdnn", "modulename": "terra.models.v2.samples", "qualname": "HeartRateVariabilityDataSampleSDNN.hrv_sdnn", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DistanceSample", "modulename": "terra.models.v2.samples", "qualname": "DistanceSample", "type": "class", "doc": "<p>DistanceSample(timestamp: Optional[str] = None, distance_meters: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.DistanceSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "DistanceSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    distance_meters: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.DistanceSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "DistanceSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DistanceSample.distance_meters", "modulename": "terra.models.v2.samples", "qualname": "DistanceSample.distance_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DistanceSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "DistanceSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.StepSample", "modulename": "terra.models.v2.samples", "qualname": "StepSample", "type": "class", "doc": "<p>StepSample(timestamp: Optional[str] = None, steps: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.StepSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "StepSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    steps: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.StepSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "StepSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.StepSample.steps", "modulename": "terra.models.v2.samples", "qualname": "StepSample.steps", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.StepSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "StepSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.ElevationSample", "modulename": "terra.models.v2.samples", "qualname": "ElevationSample", "type": "class", "doc": "<p>ElevationSample(timestamp: Optional[str] = None, elev_meters: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.ElevationSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "ElevationSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    elev_meters: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.ElevationSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "ElevationSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.ElevationSample.elev_meters", "modulename": "terra.models.v2.samples", "qualname": "ElevationSample.elev_meters", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.ElevationSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "ElevationSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PositionSample", "modulename": "terra.models.v2.samples", "qualname": "PositionSample", "type": "class", "doc": "<p>PositionSample(timestamp: Optional[str] = None, coords_lat_lng_deg: List[float] = <factory>, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.PositionSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "PositionSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    coords_lat_lng_deg: List[float] = <factory>,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.PositionSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "PositionSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PositionSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "PositionSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PowerSample", "modulename": "terra.models.v2.samples", "qualname": "PowerSample", "type": "class", "doc": "<p>PowerSample(timestamp: Optional[str] = None, watts: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.PowerSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "PowerSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    watts: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.PowerSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "PowerSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PowerSample.watts", "modulename": "terra.models.v2.samples", "qualname": "PowerSample.watts", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PowerSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "PowerSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SpeedSample", "modulename": "terra.models.v2.samples", "qualname": "SpeedSample", "type": "class", "doc": "<p>SpeedSample(timestamp: Optional[str] = None, speed_meters_per_second: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.SpeedSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "SpeedSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    speed_meters_per_second: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.SpeedSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "SpeedSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SpeedSample.speed_meters_per_second", "modulename": "terra.models.v2.samples", "qualname": "SpeedSample.speed_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SpeedSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "SpeedSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.CadenceSample", "modulename": "terra.models.v2.samples", "qualname": "CadenceSample", "type": "class", "doc": "<p>CadenceSample(timestamp: Optional[str] = None, cadence_rpm: Optional[float] = None, timer_duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.CadenceSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "CadenceSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    cadence_rpm: Optional[float] = None,\n    timer_duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.CadenceSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "CadenceSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.CadenceSample.cadence_rpm", "modulename": "terra.models.v2.samples", "qualname": "CadenceSample.cadence_rpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.CadenceSample.timer_duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "CadenceSample.timer_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.ActivityLevelSample", "modulename": "terra.models.v2.samples", "qualname": "ActivityLevelSample", "type": "class", "doc": "<p>ActivityLevelSample(timestamp: Optional[str] = None, activity_level: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.ActivityLevelSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "ActivityLevelSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    activity_level: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.ActivityLevelSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "ActivityLevelSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.ActivityLevelSample.activity_level", "modulename": "terra.models.v2.samples", "qualname": "ActivityLevelSample.activity_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.METSample", "modulename": "terra.models.v2.samples", "qualname": "METSample", "type": "class", "doc": "<p>METSample(timestamp: Optional[str] = None, level: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.METSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "METSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, timestamp: Optional[str] = None, level: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.METSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "METSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.METSample.level", "modulename": "terra.models.v2.samples", "qualname": "METSample.level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample", "modulename": "terra.models.v2.samples", "qualname": "TSSSample", "type": "class", "doc": "<p>TSSSample(planned: Optional[float] = None, actual: Optional[float] = None, method: Optional[str] = None, intensity_factor_planned: Optional[float] = None, intensity_factor_actual: Optional[float] = None, normalized_power_watts: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.TSSSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    planned: Optional[float] = None,\n    actual: Optional[float] = None,\n    method: Optional[str] = None,\n    intensity_factor_planned: Optional[float] = None,\n    intensity_factor_actual: Optional[float] = None,\n    normalized_power_watts: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.TSSSample.planned", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.planned", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample.actual", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.actual", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample.method", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.method", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample.intensity_factor_planned", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.intensity_factor_planned", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample.intensity_factor_actual", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.intensity_factor_actual", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TSSSample.normalized_power_watts", "modulename": "terra.models.v2.samples", "qualname": "TSSSample.normalized_power_watts", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SleepHypnogramSample", "modulename": "terra.models.v2.samples", "qualname": "SleepHypnogramSample", "type": "class", "doc": "<p>SleepHypnogramSample(timestamp: Optional[str] = None, level: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.SleepHypnogramSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "SleepHypnogramSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, timestamp: Optional[str] = None, level: Optional[int] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.SleepHypnogramSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "SleepHypnogramSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SleepHypnogramSample.level", "modulename": "terra.models.v2.samples", "qualname": "SleepHypnogramSample.level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OxygenSaturationSample", "modulename": "terra.models.v2.samples", "qualname": "OxygenSaturationSample", "type": "class", "doc": "<p>OxygenSaturationSample(timestamp: Optional[str] = None, percentage: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.OxygenSaturationSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "OxygenSaturationSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    percentage: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.OxygenSaturationSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "OxygenSaturationSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OxygenSaturationSample.percentage", "modulename": "terra.models.v2.samples", "qualname": "OxygenSaturationSample.percentage", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BreathSample", "modulename": "terra.models.v2.samples", "qualname": "BreathSample", "type": "class", "doc": "<p>BreathSample(timestamp: Optional[str] = None, breaths_per_min: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.BreathSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "BreathSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    breaths_per_min: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.BreathSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "BreathSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BreathSample.breaths_per_min", "modulename": "terra.models.v2.samples", "qualname": "BreathSample.breaths_per_min", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SnoringSample", "modulename": "terra.models.v2.samples", "qualname": "SnoringSample", "type": "class", "doc": "<p>SnoringSample(timestamp: Optional[str] = None, duration_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.SnoringSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "SnoringSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    duration_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.SnoringSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "SnoringSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SnoringSample.duration_seconds", "modulename": "terra.models.v2.samples", "qualname": "SnoringSample.duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.StressSample", "modulename": "terra.models.v2.samples", "qualname": "StressSample", "type": "class", "doc": "<p>StressSample(timestamp: Optional[str] = None, level: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.StressSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "StressSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, timestamp: Optional[str] = None, level: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.StressSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "StressSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.StressSample.level", "modulename": "terra.models.v2.samples", "qualname": "StressSample.level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BloodPressureSample", "modulename": "terra.models.v2.samples", "qualname": "BloodPressureSample", "type": "class", "doc": "<p>BloodPressureSample(timestamp: Optional[str] = None, diastolic_bp: Optional[float] = None, systolic_bp: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.BloodPressureSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "BloodPressureSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    diastolic_bp: Optional[float] = None,\n    systolic_bp: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.BloodPressureSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "BloodPressureSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BloodPressureSample.diastolic_bp", "modulename": "terra.models.v2.samples", "qualname": "BloodPressureSample.diastolic_bp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BloodPressureSample.systolic_bp", "modulename": "terra.models.v2.samples", "qualname": "BloodPressureSample.systolic_bp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample", "type": "class", "doc": "<p>MeasurementDataSample(measurement_time: Optional[str] = None, BMI: Optional[float] = None, BMR: Optional[float] = None, RMR: Optional[float] = None, estimated_fitness_age: Optional[int] = None, skin_fold_mm: Optional[float] = None, bodyfat_percentage: Optional[float] = None, weight_kg: Optional[float] = None, height_cm: Optional[float] = None, bone_mass_g: Optional[float] = None, muscle_mass_g: Optional[float] = None, lean_mass_g: Optional[float] = None, water_percentage: Optional[float] = None, insulin_units: Optional[float] = None, insulin_type: Optional[str] = None, urine_color: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    measurement_time: Optional[str] = None,\n    BMI: Optional[float] = None,\n    BMR: Optional[float] = None,\n    RMR: Optional[float] = None,\n    estimated_fitness_age: Optional[int] = None,\n    skin_fold_mm: Optional[float] = None,\n    bodyfat_percentage: Optional[float] = None,\n    weight_kg: Optional[float] = None,\n    height_cm: Optional[float] = None,\n    bone_mass_g: Optional[float] = None,\n    muscle_mass_g: Optional[float] = None,\n    lean_mass_g: Optional[float] = None,\n    water_percentage: Optional[float] = None,\n    insulin_units: Optional[float] = None,\n    insulin_type: Optional[str] = None,\n    urine_color: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.measurement_time", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.measurement_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.BMI", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.BMI", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.BMR", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.BMR", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.RMR", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.RMR", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.estimated_fitness_age", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.estimated_fitness_age", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.skin_fold_mm", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.skin_fold_mm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.bodyfat_percentage", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.bodyfat_percentage", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.weight_kg", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.weight_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.height_cm", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.height_cm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.bone_mass_g", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.bone_mass_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.muscle_mass_g", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.muscle_mass_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.lean_mass_g", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.lean_mass_g", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.water_percentage", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.water_percentage", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.insulin_units", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.insulin_units", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.insulin_type", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.insulin_type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.MeasurementDataSample.urine_color", "modulename": "terra.models.v2.samples", "qualname": "MeasurementDataSample.urine_color", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BodyTemperatureSample", "modulename": "terra.models.v2.samples", "qualname": "BodyTemperatureSample", "type": "class", "doc": "<p>BodyTemperatureSample(timestamp: Optional[str] = None, body_temperature_celsius: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.BodyTemperatureSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "BodyTemperatureSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    body_temperature_celsius: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.BodyTemperatureSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "BodyTemperatureSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.BodyTemperatureSample.body_temperature_celsius", "modulename": "terra.models.v2.samples", "qualname": "BodyTemperatureSample.body_temperature_celsius", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SkinTemperatureSample", "modulename": "terra.models.v2.samples", "qualname": "SkinTemperatureSample", "type": "class", "doc": "<p>SkinTemperatureSample(timestamp: Optional[str] = None, skin_temperature_celsius: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.SkinTemperatureSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "SkinTemperatureSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    skin_temperature_celsius: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.SkinTemperatureSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "SkinTemperatureSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.SkinTemperatureSample.skin_temperature_celsius", "modulename": "terra.models.v2.samples", "qualname": "SkinTemperatureSample.skin_temperature_celsius", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.AmbientTemperatureSample", "modulename": "terra.models.v2.samples", "qualname": "AmbientTemperatureSample", "type": "class", "doc": "<p>AmbientTemperatureSample(temperature_celsius: Optional[float] = None, timestamp: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.AmbientTemperatureSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "AmbientTemperatureSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    temperature_celsius: Optional[float] = None,\n    timestamp: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.AmbientTemperatureSample.temperature_celsius", "modulename": "terra.models.v2.samples", "qualname": "AmbientTemperatureSample.temperature_celsius", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.AmbientTemperatureSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "AmbientTemperatureSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TemperatureSample", "modulename": "terra.models.v2.samples", "qualname": "TemperatureSample", "type": "class", "doc": "<p>TemperatureSample(temperature_celsius: Optional[float] = None, timestamp: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.TemperatureSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "TemperatureSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    temperature_celsius: Optional[float] = None,\n    timestamp: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.TemperatureSample.temperature_celsius", "modulename": "terra.models.v2.samples", "qualname": "TemperatureSample.temperature_celsius", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.TemperatureSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "TemperatureSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OtherDeviceData", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData", "type": "class", "doc": "<p>OtherDeviceData(name: Optional[str] = None, manufacturer: Optional[str] = None, serial_number: Optional[str] = None, software_version: Optional[str] = None, hardware_version: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.__init__", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    name: Optional[str] = None,\n    manufacturer: Optional[str] = None,\n    serial_number: Optional[str] = None,\n    software_version: Optional[str] = None,\n    hardware_version: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.name", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.manufacturer", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.manufacturer", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.serial_number", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.serial_number", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.software_version", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.software_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.OtherDeviceData.hardware_version", "modulename": "terra.models.v2.samples", "qualname": "OtherDeviceData.hardware_version", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HydrationMeasurementSample", "modulename": "terra.models.v2.samples", "qualname": "HydrationMeasurementSample", "type": "class", "doc": "<p>HydrationMeasurementSample(timestamp: Optional[str] = None, hydration_kg: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.HydrationMeasurementSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "HydrationMeasurementSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    hydration_kg: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.HydrationMeasurementSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "HydrationMeasurementSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.HydrationMeasurementSample.hydration_kg", "modulename": "terra.models.v2.samples", "qualname": "HydrationMeasurementSample.hydration_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.Vo2MaxSample", "modulename": "terra.models.v2.samples", "qualname": "Vo2MaxSample", "type": "class", "doc": "<p>Vo2MaxSample(timestamp: Optional[str] = None, vo2max_ml_per_min_per_kg: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.Vo2MaxSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "Vo2MaxSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    vo2max_ml_per_min_per_kg: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.Vo2MaxSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "Vo2MaxSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.Vo2MaxSample.vo2max_ml_per_min_per_kg", "modulename": "terra.models.v2.samples", "qualname": "Vo2MaxSample.vo2max_ml_per_min_per_kg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PulseVelocitySample", "modulename": "terra.models.v2.samples", "qualname": "PulseVelocitySample", "type": "class", "doc": "<p>PulseVelocitySample(timestamp: Optional[str] = None, pulse_wave_velocity_meters_per_second: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.PulseVelocitySample.__init__", "modulename": "terra.models.v2.samples", "qualname": "PulseVelocitySample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    pulse_wave_velocity_meters_per_second: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.PulseVelocitySample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "PulseVelocitySample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.PulseVelocitySample.pulse_wave_velocity_meters_per_second", "modulename": "terra.models.v2.samples", "qualname": "PulseVelocitySample.pulse_wave_velocity_meters_per_second", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.AFibClassificationSample", "modulename": "terra.models.v2.samples", "qualname": "AFibClassificationSample", "type": "class", "doc": "<p>AFibClassificationSample(timestamp: Optional[str] = None, afib_classification: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.AFibClassificationSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "AFibClassificationSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    timestamp: Optional[str] = None,\n    afib_classification: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.AFibClassificationSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "AFibClassificationSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.AFibClassificationSample.afib_classification", "modulename": "terra.models.v2.samples", "qualname": "AFibClassificationSample.afib_classification", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DrinkSample", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample", "type": "class", "doc": "<p>DrinkSample(drink_unit: Optional[str] = None, drink_volume: Optional[str] = None, drink_name: Optional[str] = None, timestamp: Optional[str] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.samples.DrinkSample.__init__", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    drink_unit: Optional[str] = None,\n    drink_volume: Optional[str] = None,\n    drink_name: Optional[str] = None,\n    timestamp: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.samples.DrinkSample.drink_unit", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample.drink_unit", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DrinkSample.drink_volume", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample.drink_volume", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DrinkSample.drink_name", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample.drink_name", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.samples.DrinkSample.timestamp", "modulename": "terra.models.v2.samples", "qualname": "DrinkSample.timestamp", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep", "modulename": "terra.models.v2.sleep", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.models.v2.sleep.Sleep", "modulename": "terra.models.v2.sleep", "qualname": "Sleep", "type": "class", "doc": "<p>Sleep(metadata: terra.models.v2.sleep.Metadata = <factory>, temperature_data: terra.models.v2.sleep.TemperatureData = <factory>, readiness_data: terra.models.v2.sleep.ReadinessData = <factory>, heart_rate_data: terra.models.v2.sleep.HeartRateData = <factory>, sleep_durations_data: terra.models.v2.sleep.SleepDurationsData = <factory>, respiration_data: terra.models.v2.sleep.RespirationData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.Sleep.__init__", "modulename": "terra.models.v2.sleep", "qualname": "Sleep.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    metadata: terra.models.v2.sleep.Metadata = <factory>,\n    temperature_data: terra.models.v2.sleep.TemperatureData = <factory>,\n    readiness_data: terra.models.v2.sleep.ReadinessData = <factory>,\n    heart_rate_data: terra.models.v2.sleep.HeartRateData = <factory>,\n    sleep_durations_data: terra.models.v2.sleep.SleepDurationsData = <factory>,\n    respiration_data: terra.models.v2.sleep.RespirationData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.Metadata", "modulename": "terra.models.v2.sleep", "qualname": "Metadata", "type": "class", "doc": "<p>Metadata(start_time: Optional[str] = None, end_time: Optional[str] = None, upload_type: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.Metadata.__init__", "modulename": "terra.models.v2.sleep", "qualname": "Metadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    upload_type: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.Metadata.start_time", "modulename": "terra.models.v2.sleep", "qualname": "Metadata.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.Metadata.end_time", "modulename": "terra.models.v2.sleep", "qualname": "Metadata.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.Metadata.upload_type", "modulename": "terra.models.v2.sleep", "qualname": "Metadata.upload_type", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.ReadinessData", "modulename": "terra.models.v2.sleep", "qualname": "ReadinessData", "type": "class", "doc": "<p>ReadinessData(readiness: Optional[float] = None, recovery_level: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.ReadinessData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "ReadinessData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    readiness: Optional[float] = None,\n    recovery_level: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.ReadinessData.readiness", "modulename": "terra.models.v2.sleep", "qualname": "ReadinessData.readiness", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.ReadinessData.recovery_level", "modulename": "terra.models.v2.sleep", "qualname": "ReadinessData.recovery_level", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.TemperatureData", "modulename": "terra.models.v2.sleep", "qualname": "TemperatureData", "type": "class", "doc": "<p>TemperatureData(delta: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.TemperatureData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "TemperatureData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, delta: Optional[float] = None)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.TemperatureData.delta", "modulename": "terra.models.v2.sleep", "qualname": "TemperatureData.delta", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary", "type": "class", "doc": "<p>HeartRateDataSummary(avg_hr_bpm: Optional[int] = None, max_hr_bpm: Optional[int] = None, min_hr_bpm: Optional[int] = None, avg_hrv_rmssd: Optional[int] = None, avg_hrv_sdnn: Optional[int] = None, user_max_hr_bpm: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.__init__", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    avg_hr_bpm: Optional[int] = None,\n    max_hr_bpm: Optional[int] = None,\n    min_hr_bpm: Optional[int] = None,\n    avg_hrv_rmssd: Optional[int] = None,\n    avg_hrv_sdnn: Optional[int] = None,\n    user_max_hr_bpm: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.avg_hr_bpm", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.avg_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.max_hr_bpm", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.max_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.min_hr_bpm", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.min_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.avg_hrv_rmssd", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.avg_hrv_rmssd", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.avg_hrv_sdnn", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.avg_hrv_sdnn", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataSummary.user_max_hr_bpm", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataSummary.user_max_hr_bpm", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.HeartRateDataDetailed", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataDetailed", "type": "class", "doc": "<p>HeartRateDataDetailed(hr_samples: List[terra.models.v2.samples.HeartRateDataSample] = <factory>, hrv_samples_rmssd: List[terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD] = <factory>, hrv_samples_sdnn: List[terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.HeartRateDataDetailed.__init__", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateDataDetailed.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    hr_samples: List[terra.models.v2.samples.HeartRateDataSample] = <factory>,\n    hrv_samples_rmssd: List[terra.models.v2.samples.HeartRateVariabilityDataSampleRMSSD] = <factory>,\n    hrv_samples_sdnn: List[terra.models.v2.samples.HeartRateVariabilityDataSampleSDNN] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.HeartRateData", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateData", "type": "class", "doc": "<p>HeartRateData(summary: terra.models.v2.sleep.HeartRateDataSummary = <factory>, detailed: terra.models.v2.sleep.HeartRateDataDetailed = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.HeartRateData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "HeartRateData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    summary: terra.models.v2.sleep.HeartRateDataSummary = <factory>,\n    detailed: terra.models.v2.sleep.HeartRateDataDetailed = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData", "type": "class", "doc": "<p>SleepDurationsAwakeData(sleep_latency_seconds: Optional[float] = None, wake_up_latency_seconds: Optional[float] = None, duration_awake_state_seconds: Optional[float] = None, duration_short_interruption_seconds: Optional[float] = None, duration_long_interruption_seconds: Optional[float] = None, num_out_of_bed_events: Optional[int] = None, num_wakeup_events: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    sleep_latency_seconds: Optional[float] = None,\n    wake_up_latency_seconds: Optional[float] = None,\n    duration_awake_state_seconds: Optional[float] = None,\n    duration_short_interruption_seconds: Optional[float] = None,\n    duration_long_interruption_seconds: Optional[float] = None,\n    num_out_of_bed_events: Optional[int] = None,\n    num_wakeup_events: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.sleep_latency_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.sleep_latency_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.wake_up_latency_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.wake_up_latency_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.duration_awake_state_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.duration_awake_state_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.duration_short_interruption_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.duration_short_interruption_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.duration_long_interruption_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.duration_long_interruption_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.num_out_of_bed_events", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.num_out_of_bed_events", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAwakeData.num_wakeup_events", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAwakeData.num_wakeup_events", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData", "type": "class", "doc": "<p>SleepDurationsAsleepData(duration_asleep_state_seconds: Optional[float] = None, duration_deep_sleep_state_seconds: Optional[float] = None, duration_light_sleep_state_seconds: Optional[float] = None, duration_REM_sleep_state_seconds: Optional[float] = None, num_REM_events: Optional[int] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    duration_asleep_state_seconds: Optional[float] = None,\n    duration_deep_sleep_state_seconds: Optional[float] = None,\n    duration_light_sleep_state_seconds: Optional[float] = None,\n    duration_REM_sleep_state_seconds: Optional[float] = None,\n    num_REM_events: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.duration_asleep_state_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.duration_asleep_state_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.duration_deep_sleep_state_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.duration_deep_sleep_state_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.duration_light_sleep_state_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.duration_light_sleep_state_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.duration_REM_sleep_state_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.duration_REM_sleep_state_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsAsleepData.num_REM_events", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsAsleepData.num_REM_events", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsOtherData", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsOtherData", "type": "class", "doc": "<p>SleepDurationsOtherData(duration_unmeasurable_sleep_seconds: Optional[float] = None, duration_in_bed_seconds: Optional[float] = None)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.SleepDurationsOtherData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsOtherData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    duration_unmeasurable_sleep_seconds: Optional[float] = None,\n    duration_in_bed_seconds: Optional[float] = None\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SleepDurationsOtherData.duration_unmeasurable_sleep_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsOtherData.duration_unmeasurable_sleep_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsOtherData.duration_in_bed_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsOtherData.duration_in_bed_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SleepDurationsData", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsData", "type": "class", "doc": "<p>SleepDurationsData(sleep_efficiency: Optional[float] = None, awake: terra.models.v2.sleep.SleepDurationsAwakeData = <factory>, asleep: terra.models.v2.sleep.SleepDurationsAsleepData = <factory>, other: terra.models.v2.sleep.SleepDurationsOtherData = <factory>, hypnogram_samples: List[terra.models.v2.samples.SleepHypnogramSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.SleepDurationsData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    sleep_efficiency: Optional[float] = None,\n    awake: terra.models.v2.sleep.SleepDurationsAwakeData = <factory>,\n    asleep: terra.models.v2.sleep.SleepDurationsAsleepData = <factory>,\n    other: terra.models.v2.sleep.SleepDurationsOtherData = <factory>,\n    hypnogram_samples: List[terra.models.v2.samples.SleepHypnogramSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SleepDurationsData.sleep_efficiency", "modulename": "terra.models.v2.sleep", "qualname": "SleepDurationsData.sleep_efficiency", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.OxygenSaturationData", "modulename": "terra.models.v2.sleep", "qualname": "OxygenSaturationData", "type": "class", "doc": "<p>OxygenSaturationData(start_time: Optional[str] = None, end_time: Optional[str] = None, samples: List[terra.models.v2.samples.OxygenSaturationSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.OxygenSaturationData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "OxygenSaturationData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    samples: List[terra.models.v2.samples.OxygenSaturationSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.OxygenSaturationData.start_time", "modulename": "terra.models.v2.sleep", "qualname": "OxygenSaturationData.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.OxygenSaturationData.end_time", "modulename": "terra.models.v2.sleep", "qualname": "OxygenSaturationData.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData", "type": "class", "doc": "<p>BreathsData(start_time: Optional[str] = None, end_time: Optional[str] = None, on_demand_reading: Optional[bool] = None, avg_breaths_per_min: Optional[float] = None, max_breaths_per_min: Optional[float] = None, min_breaths_per_min: Optional[float] = None, samples: List[terra.models.v2.samples.BreathSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.BreathsData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    on_demand_reading: Optional[bool] = None,\n    avg_breaths_per_min: Optional[float] = None,\n    max_breaths_per_min: Optional[float] = None,\n    min_breaths_per_min: Optional[float] = None,\n    samples: List[terra.models.v2.samples.BreathSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.BreathsData.start_time", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData.end_time", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData.on_demand_reading", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.on_demand_reading", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData.avg_breaths_per_min", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.avg_breaths_per_min", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData.max_breaths_per_min", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.max_breaths_per_min", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.BreathsData.min_breaths_per_min", "modulename": "terra.models.v2.sleep", "qualname": "BreathsData.min_breaths_per_min", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SnoringData", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData", "type": "class", "doc": "<p>SnoringData(start_time: Optional[str] = None, end_time: Optional[str] = None, total_snoring_duration_seconds: Optional[float] = None, num_snoring_events: Optional[int] = None, samples: List[terra.models.v2.samples.SnoringSample] = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.SnoringData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    total_snoring_duration_seconds: Optional[float] = None,\n    num_snoring_events: Optional[int] = None,\n    samples: List[terra.models.v2.samples.SnoringSample] = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.models.v2.sleep.SnoringData.start_time", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData.start_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SnoringData.end_time", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData.end_time", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SnoringData.total_snoring_duration_seconds", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData.total_snoring_duration_seconds", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.SnoringData.num_snoring_events", "modulename": "terra.models.v2.sleep", "qualname": "SnoringData.num_snoring_events", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": " = None"}, {"fullname": "terra.models.v2.sleep.RespirationData", "modulename": "terra.models.v2.sleep", "qualname": "RespirationData", "type": "class", "doc": "<p>RespirationData(oxygen_saturation_data: terra.models.v2.sleep.OxygenSaturationData = <factory>, breaths_data: terra.models.v2.sleep.BreathsData = <factory>, snoring_data: terra.models.v2.sleep.SnoringData = <factory>)</p>\n", "bases": "terra.models.base_model.TerraDataModel"}, {"fullname": "terra.models.v2.sleep.RespirationData.__init__", "modulename": "terra.models.v2.sleep", "qualname": "RespirationData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    oxygen_saturation_data: terra.models.v2.sleep.OxygenSaturationData = <factory>,\n    breaths_data: terra.models.v2.sleep.BreathsData = <factory>,\n    snoring_data: terra.models.v2.sleep.SnoringData = <factory>\n)", "funcdef": "def"}, {"fullname": "terra.utils", "modulename": "terra.utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "terra.utils.update_if_not_none", "modulename": "terra.utils", "qualname": "update_if_not_none", "type": "function", "doc": "<p>Insert all values from <code>new_values</code> into <code>to_update</code>, overwriting the values\nfor any keys already present, unless the value is <code>None</code>, in which case do nothing.</p>\n\n<p>Args:\n    to_update (<code>dict</code>): dict object to be updated with additional values\n    new_values (<code>dict</code>): dict object to be updated with additional values</p>\n\n<p>Returns:\n    <code>dict</code>: to_update object updated with all values in new_values object which were not None</p>\n", "signature": "(to_update: Dict[str, Any], new_values: Dict[str, Any]) -> Dict[str, Any]", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();